var lalolib=(function(){var printPrecision=3;var LALOLibPlotsIndex=0;var LALOLibPlots=new Array();var LALOLABPLOTMOVING=false;if(typeof(console)=="undefined"){var console={log:function(){}};}
if(typeof(Math.sign)=="undefined"){Math.sign=function(x){return(x>=0?(x==0?0:1):-1);}}
function laloprint(x,htmlId,append){if(typeof(htmlId)=="undefined")
var htmlId="LALOLibOutput";if(typeof(append)=="undefined")
var append=true;return printMat(x,size(x),htmlId,append);}
function printMat(A,size,htmlId,append){if(typeof(append)==="undefined")
var append=false;if(typeof(htmlId)=="undefined"||htmlId===true){if(type(A)=="matrix"){var str="[";var i;var j;var m=size[0];var n=size[1];for(i=0;i<m;i++){str+="[";for(j=0;j<n-1;j++)
str+=printNumber(A.val[i*A.n+j])+",";if(i<m-1)
str+=printNumber(A.val[i*A.n+j])+"]; ";else
str+=printNumber(A.val[i*A.n+j])+"]";}
str+="]";return str;}
else if(type(A)=="vector"){var n=A.length;var str="";for(var i=0;i<n;i++){str+="[ "+printNumber(A[i])+" ]<br>";}
console.log(str);return str;}}
else{var html="";var i;var j;if(isScalar(A)){html+=A+"<br>";}
else if(type(A)=="vector"){var n=size[0];for(i=0;i<n;i++){html+="[ "+printNumber(A[i])+" ]<br>";}}
else{var m=size[0];var n=size[1];for(i=0;i<m;i++){html+="[ ";for(j=0;j<n-1;j++){html+=printNumber(A.val[i*A.n+j])+", ";}
html+=printNumber(A.val[i*A.n+j])+" ]<br>";}}
if(append)
document.getElementById(htmlId).innerHTML+=html;else
document.getElementById(htmlId).innerHTML=html;}}
function printNumber(x){switch(typeof(x)){case "undefined":return ""+0;break;case "string":return x;break;case "boolean":return x;break;default:if(x==Infinity)
return "Inf";if(x==-Infinity)
return "-Inf";var x_int=Math.floor(x);if(Math.abs(x-x_int)<2.23e-16){return ""+x_int;}
else
return x.toFixed(printPrecision);break;}}
function error(msg){throw new Error(msg);}
function plot(multiargs){var data=new Array();var styles=new Array();var legends=new Array();var minX=Infinity;var maxX=-Infinity;var minY=Infinity;var maxY=-Infinity;var p=0;var x;var y;var style;var i;var n;var c=0;while(p<arguments.length){if(type(arguments[p])=="vector"){if(p+1<arguments.length&&type(arguments[p+1])=="vector"){x=arguments[p];y=arguments[p+1];p++;}
else{y=arguments[p];x=range(y.length);}}
else if(type(arguments[p])=="matrix"){if(arguments[p].n==1){y=arguments[p].val;x=range(y.length);}
else if(arguments[p].m==1){y=arguments[p].val;x=range(y.length);}
else if(arguments[p].n==2){x=getCols(arguments[p],[0]);y=getCols(arguments[p],[1]);}
else{x=range(arguments[p].n);for(var row=0;row<arguments[p].m;row++){y=arguments[p].row(row);data[c]=[new Array(x.length),new Array(x.length)];for(i=0;i<x.length;i++){data[c][0][i]=x[i];data[c][1][i]=y[i];if(x[i]<minX)
minX=x[i];if(x[i]>maxX)
maxX=x[i];if(y[i]>maxY)
maxY=y[i];if(y[i]<minY)
minY=y[i];}
styles[c]=undefined;legends[c]="";c++;}
p++;continue;}}
else{return "undefined";}
style=undefined;if(p+1<arguments.length&&type(arguments[p+1])=="string"){style=arguments[p+1];p++;}
legend="";if(p+1<arguments.length&&type(arguments[p+1])=="string"){legend=arguments[p+1];p++;}
data[c]=[new Array(x.length),new Array(x.length)];for(i=0;i<x.length;i++){data[c][0][i]=x[i];data[c][1][i]=y[i];if(x[i]<minX)
minX=x[i];if(x[i]>maxX)
maxX=x[i];if(y[i]>maxY)
maxY=y[i];if(y[i]<minY)
minY=y[i];}
styles[c]=style;legends[c]=legend;c++;p++;}
var widthX=maxX-minX;var widthY=Math.max(maxY-minY,1);maxX+=0.1*widthX;minX-=0.1*widthX;maxY+=0.1*widthY;minY-=0.1*widthY;if(minY>0)
minY=-0.1*maxY;if(maxY<0)
maxY=-0.1*minY;var scaleY=0.9*(maxX-minX)/(2*maxY);var plotinfo={"data":data,"minX":minX,"maxX":maxX,"minY":minY,"maxY":maxY,"styles":styles,"legend":legends};var plotid="LALOLibPlot"+LALOLibPlotsIndex;var legendwidth=50;LALOLibOutput.innerHTML+="<br><div style='position:relative;left:0px;top:0px;text-align:left;'> <div><a onmousemove='mouseposition(event,"+LALOLibPlotsIndex+");' onmousedown='mousestartmove(event,"+LALOLibPlotsIndex+");' onmouseup='mousestopmove(event);' onmouseleave='mousestopmove(event);' ondblclick='zoomoriginal("+LALOLibPlotsIndex+");'><canvas id='"+plotid+"'  width='500' height='500' style='border: 1px solid black;'></canvas></a></div> <label id='lblposition"+LALOLibPlotsIndex+"'></label> <div style='position: absolute;left: 550px;top: -1em;'> <canvas id='legend"+LALOLibPlotsIndex+"' width='"+legendwidth+"' height='500'></canvas></div> <div id='legendtxt"+LALOLibPlotsIndex+"' style='position: absolute;left: 610px;top: 0;'></div> </div>";var ylegend=20;LALOLibPlots[LALOLibPlotsIndex]=new Plot(plotid);LALOLibPlots[LALOLibPlotsIndex].setScalePlot(plotinfo.minX,plotinfo.maxX,200,plotinfo.scaleY);if(plotinfo.minY&&plotinfo.maxY){LALOLibPlots[LALOLibPlotsIndex].view(plotinfo.minX,plotinfo.maxX,plotinfo.minY,plotinfo.maxY);}
var colors=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0];var p;var color;for(p=0;p<plotinfo.data.length;p++){var linestyle=true;var pointstyle=true;if(typeof(plotinfo.styles[p])=="string"){if(plotinfo.styles[p].indexOf(".")>=0){linestyle=false;plotinfo.styles[p]=plotinfo.styles[p].replace(".","");}
if(plotinfo.styles[p].indexOf("_")>=0){pointstyle=false;plotinfo.styles[p]=plotinfo.styles[p].replace("_","");}
color=parseColor(plotinfo.styles[p]);if(color<0)
color=colors.splice(0,1)[0];else
colors.splice(colors.indexOf(color),1);}
else
color=color=colors.splice(0,1)[0];if(typeof(color)=="undefined")
color=0;for(i=0;i<plotinfo.data[p][0].length;i++){if(pointstyle)
LALOLibPlots[LALOLibPlotsIndex].addPoint(plotinfo.data[p][0][i],plotinfo.data[p][1][i],color);if(linestyle&&i<plotinfo.data[p][0].length-1)
LALOLibPlots[LALOLibPlotsIndex].plot_line(plotinfo.data[p][0][i],plotinfo.data[p][1][i],plotinfo.data[p][0][i+1],plotinfo.data[p][1][i+1],color);}
if(plotinfo.legend[p]!=""){var ctx=document.getElementById("legend"+LALOLibPlotsIndex).getContext("2d");setcolor(ctx,color);ctx.lineWidth="3";if(pointstyle){ctx.beginPath();ctx.arc(legendwidth/2,ylegend,5,0,2*Math.PI,true);ctx.closePath();ctx.fill();}
if(linestyle){ctx.beginPath();ctx.moveTo(0,ylegend);ctx.lineTo(legendwidth,ylegend);ctx.stroke();}
ylegend+=20;document.getElementById("legendtxt"+LALOLibPlotsIndex).innerHTML+=plotinfo.legend[p]+"<br>";}}
for(var pi=0;pi<=LALOLibPlotsIndex;pi++)
LALOLibPlots[pi].replot();if(window.addEventListener)
document.getElementById(plotid).addEventListener('DOMMouseScroll',this.mousezoom,false);document.getElementById(plotid).onmousewheel=this.mousezoom;LALOLibPlotsIndex++;}
function colorplot(multiargs){var minX=Infinity;var maxX=-Infinity;var minY=Infinity;var maxY=-Infinity;var minZ=Infinity;var maxZ=-Infinity;var x;var y;var z;var i;var t0=type(arguments[0]);if(t0=="matrix"&&arguments[0].n==3){x=getCols(arguments[0],[0]);y=getCols(arguments[0],[1]);z=getCols(arguments[0],[2]);}
else if(t0=="matrix"&&arguments[0].n==2&&type(arguments[1])=="vector"){x=getCols(arguments[0],[0]);y=getCols(arguments[0],[1]);z=arguments[1];}
else if(t0=="vector"&&type(arguments[1])=="vector"&&type(arguments[2])=="vector"){x=arguments[0];y=arguments[1];z=arguments[2];}
else{return "undefined";}
var minX=min(x);var maxX=max(x);var minY=min(y);var maxY=max(y);var minZ=min(z);var maxZ=max(z);var widthX=maxX-minX;var widthY=Math.max(maxY-minY,1);maxX+=0.1*widthX;minX-=0.1*widthX;maxY+=0.1*widthY;minY-=0.1*widthY;if(minY>0)
minY=-0.1*maxY;if(maxY<0)
maxY=-0.1*minY;var plotinfo={"x":x,"y":y,"z":z,"minX":minX,"maxX":maxX,"minY":minY,"maxY":maxY,"minZ":minZ,"maxZ":maxZ};var plotid="LALOLibPlot"+LALOLibPlotsIndex;var legendwidth=50;LALOLibOutput.innerHTML+="<br><div style='position:relative;left:0px;top:0px;text-align:left;'> <div><a onmousemove='mouseposition(event,"+LALOLibPlotsIndex+");' onmousedown='mousestartmove(event,"+LALOLibPlotsIndex+");' onmouseup='mousestopmove(event);' onmouseleave='mousestopmove(event);' ondblclick='zoomoriginal("+LALOLibPlotsIndex+");'><canvas id='"+plotid+"'  width='500' height='500' style='border: 1px solid black;'></canvas></a></div> <label id='lblposition"+LALOLibPlotsIndex+"'></label> <div style='position: absolute;left: 550px;top: -1em;'><label id='legendmaxZ"+LALOLibPlotsIndex+"' style='font-family:verdana;font-size:80%;'></label><br>  <canvas id='legend"+LALOLibPlotsIndex+"' width='"+legendwidth+"' height='500'></canvas><br><label id='legendminZ"+LALOLibPlotsIndex+"' style='font-family:verdana;font-size:80%;'></label></div> <div id='legendtxt"+LALOLibPlotsIndex+"' style='position: absolute;left: 610px;top: 0;'></div> </div>";LALOLibPlots[LALOLibPlotsIndex]=new ColorPlot(plotid);LALOLibPlots[LALOLibPlotsIndex].setScale(plotinfo.minX,plotinfo.maxX,plotinfo.minY,plotinfo.maxY,plotinfo.minZ,plotinfo.maxZ);LALOLibPlots[LALOLibPlotsIndex].view(plotinfo.minX,plotinfo.maxX,plotinfo.minY,plotinfo.maxY);for(var i=0;i<plotinfo.x.length;i++)
LALOLibPlots[LALOLibPlotsIndex].addPoint(plotinfo.x[i],plotinfo.y[i],plotinfo.z[i]);LALOLibPlots[LALOLibPlotsIndex].replot();var legendwidth=50;var ctx=document.getElementById("legend"+LALOLibPlotsIndex).getContext("2d");var legendcanvas=document.getElementById("legend"+LALOLibPlotsIndex);if(legendcanvas)
var legendheight=legendcanvas.height;else
var legendheight=500;var y;for(var i=0;i<LALOLibPlots[LALOLibPlotsIndex].cmap.length;i++){y=Math.floor(i*legendheight/LALOLibPlots[LALOLibPlotsIndex].cmap.length);ctx.fillStyle="rgb("+LALOLibPlots[LALOLibPlotsIndex].cmap[i][0]+","+LALOLibPlots[LALOLibPlotsIndex].cmap[i][1]+","+LALOLibPlots[LALOLibPlotsIndex].cmap[i][2]+")";ctx.fillRect(0,legendheight-y,legendwidth,(legendheight/LALOLibPlots[LALOLibPlotsIndex].cmap.length)+1);}
document.getElementById("legendmaxZ"+LALOLibPlotsIndex).innerHTML=plotinfo.maxZ.toPrecision(3);document.getElementById("legendminZ"+LALOLibPlotsIndex).innerHTML=plotinfo.minZ.toPrecision(3);if(window.addEventListener)
document.getElementById(plotid).addEventListener('DOMMouseScroll',this.mousezoom,false);document.getElementById(plotid).onmousewheel=this.mousezoom;LALOLibPlotsIndex++;}
function plot3(multiargs){var data=new Array();var styles=new Array();var legends=new Array();var p=0;var x;var y;var z;var style;var i;var n;var c=0;while(p<arguments.length){if(type(arguments[p])=="vector"){if(p+2<arguments.length&&type(arguments[p+1])=="vector"&&type(arguments[p+2])=="vector"){x=arguments[p];y=arguments[p+1];z=arguments[p+2];p+=2;}
else{return "undefined";}}
else if(type(arguments[p])=="matrix"){n=arguments[p].length;x=new Array(n);y=new Array(n);z=new Array(n);for(i=0;i<n;i++){x[i]=get(arguments[p],i,0);y[i]=get(arguments[p],i,1);z[i]=get(arguments[p],i,2);}}
else{return "undefined";}
style=undefined;if(p+1<arguments.length&&type(arguments[p+1])=="string"){style=arguments[p+1];p++;}
legend="";if(p+1<arguments.length&&type(arguments[p+1])=="string"){legend=arguments[p+1];p++;}
data[c]=new Array();for(i=0;i<x.length;i++){data[c][i]=[x[i],y[i],z[i]];}
styles[c]=style;legends[c]=legend;c++;p++;}
var plotinfo={"data":data,"styles":styles,"legend":legends};var plotid="LALOLibPlot"+LALOLibPlotsIndex;var legendwidth=50;LALOLibOutput.innerHTML+='<br><div style="position:relative;left:0px;top:0px;text-align:left;"> <div><a onmousedown="LALOLibPlots['+LALOLibPlotsIndex+'].mousedown(event);" onmouseup="LALOLibPlots['+LALOLibPlotsIndex+'].mouseup(event);" onmousemove="LALOLibPlots['+LALOLibPlotsIndex+'].mouserotation(event);"><canvas id="'+plotid+'" width="500" height="500" style="border: 1px solid black;" title="Hold down the mouse button to change the view and use the mousewheel to zoom in or out." ></canvas></a></div><label id="lblposition'+LALOLibPlotsIndex+'"></label> <div style="position: absolute;left: 550px;top: -1em;"> <canvas id="legend'+LALOLibPlotsIndex+'" width="'+legendwidth+'" height="500"></canvas></div> <div id="legendtxt'+LALOLibPlotsIndex+'" style="position: absolute;left: 610px;top: 0;"></div> </div>';var ylegend=20;LALOLibPlots[LALOLibPlotsIndex]=new Plot3D(plotid);LALOLibPlots[LALOLibPlotsIndex].cameraDistance=30;LALOLibPlots[LALOLibPlotsIndex].angleX=Math.PI/10;LALOLibPlots[LALOLibPlotsIndex].angleZ=Math.PI/10;LALOLibPlots[LALOLibPlotsIndex].axisNameX1="x";LALOLibPlots[LALOLibPlotsIndex].axisNameX2="y";LALOLibPlots[LALOLibPlotsIndex].axisNameX3="z";var colors=[1,2,3,4,5,0];var p;var color;for(p=0;p<plotinfo.data.length;p++){var linestyle=false;var pointstyle=true;if(typeof(plotinfo.styles[p])=="string"){if(plotinfo.styles[p].indexOf(".")>=0){linestyle=false;plotinfo.styles[p]=plotinfo.styles[p].replace(".","");}
if(plotinfo.styles[p].indexOf("_")>=0){pointstyle=false;plotinfo.styles[p]=plotinfo.styles[p].replace("_","");}
color=parseColor(plotinfo.styles[p]);if(color<0)
color=colors.splice(0,1)[0];else
colors.splice(colors.indexOf(color),1);}
else
color=color=colors.splice(0,1)[0];if(typeof(color)=="undefined")
color=0;for(i=0;i<plotinfo.data[p].length;i++){if(pointstyle){LALOLibPlots[LALOLibPlotsIndex].X.push(plotinfo.data[p][i]);LALOLibPlots[LALOLibPlotsIndex].Y.push(color);}
if(linestyle&&i<plotinfo.data[p].length-1)
LALOLibPlots[LALOLibPlotsIndex].plot_line(plotinfo.data[p][i],plotinfo.data[p][i+1],"",color);}
if(plotinfo.legend[p]!=""){var ctx=document.getElementById("legend"+LALOLibPlotsIndex).getContext("2d");setcolor(ctx,color);ctx.lineWidth="3";if(pointstyle){ctx.beginPath();ctx.arc(legendwidth/2,ylegend,5,0,2*Math.PI,true);ctx.closePath();ctx.fill();}
if(linestyle){ctx.beginPath();ctx.moveTo(0,ylegend);ctx.lineTo(legendwidth,ylegend);ctx.stroke();}
ylegend+=20;document.getElementById("legendtxt"+LALOLibPlotsIndex).innerHTML+=plotinfo.legend[p]+"<br>";}}
LALOLibPlots[LALOLibPlotsIndex].computeRanges();LALOLibPlots[LALOLibPlotsIndex].replot();LALOLibPlotsIndex++;}
function image(X,title){if(type(X)=="vector"){X=mat([X]);}
var style;var minX=min(X);var maxX=max(X);var m=X.length;var n=X.n;var scale=(maxX-minX);var i;var j;var k=0;var data=new Array();for(i=0;i<m;i++){var Xi=X.row(i);for(j=0;j<n;j++){color=mul((Xi[j]-minX)/scale,ones(3));data[k]=[i/m,j/n,color];k++;}}
style=[m,n,minX,maxX];var imagedata={"data":data,"style":style,"title":title};var plotid="LALOLibPlot"+LALOLibPlotsIndex;var legendwidth=50;var pixWidth;var pixHeight;var ylegend=20;var i;var width=500;var height=500;var title=imagedata.title;if(title){LALOLibOutput.innerHTML+="<h3>"+title+"</h3>"+"  ( "+imagedata.style[0]+" by "+imagedata.style[1]+" matrix )";}
if(imagedata.style[1]>width){width=imagedata.style[1];plotlegend.style.left=(width+60)+"px";}
if(imagedata.style[0]>height)
height=imagedata.style[0];pixWidth=width/imagedata.style[1];pixHeight=height/imagedata.style[0];var legendwidth=50;LALOLibOutput.innerHTML+='<div style="position:relative;left:0px;top:0px;text-align:left;"> <div><a onmousemove="mouseimageposition(event,'+LALOLibPlotsIndex+');"><canvas id="'+plotid+'"  width="'+width+'" height="'+height+'" style="border: 1px solid black;"></canvas></a></div><label id="lblposition'+LALOLibPlotsIndex+'"></label> <div style="position: absolute;left: 550px;top: -1em;">'+imagedata.style[2].toFixed(3)+'<br> <canvas id="legend'+LALOLibPlotsIndex+'" width="'+legendwidth+'" height="500"></canvas> <br>'+imagedata.style[3].toFixed(3)+' </div>  </div>';var x;var y;var color;LALOLibPlots[LALOLibPlotsIndex]=imagedata;LALOLibPlots[LALOLibPlotsIndex].canvasId=plotid;var canvas=document.getElementById(plotid);if(canvas.getContext){var ctx=canvas.getContext("2d");for(i=0;i<imagedata.data.length;i++){x=canvas.width*LALOLibPlots[LALOLibPlotsIndex].data[i][1];y=canvas.height*LALOLibPlots[LALOLibPlotsIndex].data[i][0];color=LALOLibPlots[LALOLibPlotsIndex].data[i][2];ctx.fillStyle="rgb("+Math.floor(255*(1-color[0]))+","+Math.floor(255*(1-color[1]))+","+Math.floor(255*(1-color[2]))+")";ctx.fillRect(x,y,pixWidth+1,pixHeight+1);}}
var legend=document.getElementById("legend"+LALOLibPlotsIndex);var ctx=legend.getContext("2d");for(i=0;i<255;i++){y=Math.floor(i*legend.height/255);ctx.fillStyle="rgb("+(255-i)+","+(255-i)+","+(255-i)+")";ctx.fillRect(0,y,legendwidth,(legend.height/255)+1);}
LALOLibPlots[LALOLibPlotsIndex].pixelWidth=pixWidth;LALOLibPlots[LALOLibPlotsIndex].pixelHeight=pixHeight;LALOLibPlotsIndex++;}
function parseColor(str){if(typeof(str)=="undefined")
return-1;var color;switch(str){case "k":case "black":color=0;break;case "blue":case "b":color=1;break;case "r":case "red":color=2;break;case "g":case "green":color=3;break;case "m":case "magenta":color=4;break;case "y":case "yellow":color=5;break;default:color=-1;break;}
return color;}
function mousezoom(e,delta,plotidx){if(!e)
e=window.event;e.preventDefault();if(typeof(plotidx)=="undefined")
var plotidx=0;if(typeof(delta)=="undefined"){var delta=0;if(e.wheelDelta){delta=e.wheelDelta/30;}
else if(e.detail){delta=-e.detail;}}
else{if(e.button!=0)
delta*=-1;}
var plotcanvas=document.getElementById(LALOLibPlots[plotidx].canvasId);var rect=plotcanvas.getBoundingClientRect();var x=e.clientX-rect.left;var y=e.clientY-rect.top;LALOLibPlots[plotidx].zoom(1+delta/30,1+delta/30,x,y);}
function zoomoriginal(plotidx){LALOLibPlots[plotidx].resetzoom();}
function mouseposition(e,plotidx){var plotcanvas=document.getElementById(LALOLibPlots[plotidx].canvasId);var rect=plotcanvas.getBoundingClientRect();var xmouse=e.clientX-rect.left;var ymouse=e.clientY-rect.top;if(LALOLABPLOTMOVING){var dx=xmouse-LALOLABPLOTxprev;var dy=ymouse-LALOLABPLOTyprev;if(Math.abs(dx)>1||Math.abs(dy)>1){LALOLibPlots[plotidx].translate(dx,dy);}
LALOLABPLOTxprev=xmouse;LALOLABPLOTyprev=ymouse;}
else{var x=xmouse/LALOLibPlots[plotidx].scaleX+LALOLibPlots[plotidx].minX;var y=(plotcanvas.height-ymouse)/LALOLibPlots[plotidx].scaleY+LALOLibPlots[plotidx].minY;document.getElementById("lblposition"+plotidx).innerHTML="x = "+x.toFixed(3)+", y = "+y.toFixed(3);}}
function mousestartmove(e,plotidx){if(e.button==0){LALOLABPLOTMOVING=true;var plotcanvas=document.getElementById(LALOLibPlots[plotidx].canvasId);var rect=plotcanvas.getBoundingClientRect();LALOLABPLOTxprev=e.clientX-rect.left;LALOLABPLOTyprev=e.clientY-rect.top;}
else{LALOLABPLOTMOVING=false;}}
function mousestopmove(e){LALOLABPLOTMOVING=false;}
function mouseimageposition(e,plotidx){var plotcanvas=document.getElementById(LALOLibPlots[plotidx].canvasId);var rect=plotcanvas.getBoundingClientRect();var xmouse=e.clientX-rect.left;var ymouse=e.clientY-rect.top;var n=LALOLibPlots[plotidx].style[1];var minX=LALOLibPlots[plotidx].style[2];var maxX=LALOLibPlots[plotidx].style[3];var i=Math.floor(ymouse/LALOLibPlots[plotidx].pixelHeight);var j=Math.floor(xmouse/LALOLibPlots[plotidx].pixelWidth);if(j<n){var val=LALOLibPlots[plotidx].data[i*n+j][2][0]*(maxX-minX)+minX;document.getElementById("lblposition"+plotidx).innerHTML="Matrix[ "+i+" ][ "+j+" ] = "+val.toFixed(3);}}
function lalo(Command){var cmd=laloparse(Command);var res=self.eval(cmd);return res;}
function laloparse(WorkerCommand){var WorkerCommandList=WorkerCommand.split("\n");var k;var cmd="";for(k=0;k<WorkerCommandList.length;k++){if(WorkerCommandList[k].length>0){if(WorkerCommandList[k].indexOf("{")>=0||WorkerCommandList[k].indexOf("}")>=0){cmd+=WorkerCommandList[k];if(WorkerCommandList[k].indexOf("}")>=0){cmd+=" ;\n";}}
else{cmd+=parseCommand(WorkerCommandList[k])+" ;\n";}}}
return cmd;}
function parseSplittedCommand(cmd){var ops=["==","!=",">=","<=",">","<","\\",":","+","-",".*","*","./","^","'"];var opsFcts=["isEqual","isNotEqual","isGreaterOrEqual","isLowerOrEqual","isGreater","isLower","solve","range","add","sub","entrywisemul","mul","entrywisediv","pow","undefined"];var unaryOpsFcts=["","","","","","","","range","","minus","","","","","transpose"];var o;var i;var k;var operandA;var operandB;for(o=0;o<ops.length;o++){var splitted_wrt_op=cmd.split(ops[o]);if(splitted_wrt_op.length>1){if(removeSpaces(splitted_wrt_op[0])!=""){if(removeSpaces(splitted_wrt_op[1])!=""){operandA=parseSplittedCommand(splitted_wrt_op[0]);for(k=1;k<splitted_wrt_op.length;k++){operandB=splitted_wrt_op[k];operandA=opsFcts[o]+"("+operandA+","+parseSplittedCommand(operandB)+")";}
cmd=operandA;}
else{cmd=unaryOpsFcts[o]+"("+parseSplittedCommand(splitted_wrt_op[0])+")";}}
else{operandA=unaryOpsFcts[o]+"("+parseSplittedCommand(splitted_wrt_op[1])+")";for(k=2;k<splitted_wrt_op.length;k++){operandB=splitted_wrt_op[k];operandA=opsFcts[o]+"("+operandA+","+parseSplittedCommand(operandB)+")";}
cmd=operandA;}}}
return cmd;}
function parseAssignment(assignmentStr){if(assignmentStr.indexOf("[")<0){return assignmentStr;}
else{var assign=removeSpaces(assignmentStr).replace("=","").replace(",","][");var middle=assign.indexOf("][");var start=assign.indexOf("[");var varname=assign.substr(0,start);if(middle>=0){var rowsrange=assign.substr(start+1,middle-start-1);var end=middle+1;while(assign.indexOf("]",end+1)>=0)
end=assign.indexOf("]",end+1);var colsrange=assign.substr(middle+2,end-(middle+2));var rowssplit=rowsrange.split(":");if(rowssplit.length==2){if(rowssplit[0]==""&&rowssplit[1]=="")
rowsrange="[]";else
rowsrange="range("+rowssplit[0]+","+rowssplit[1]+")";}
else if(rowssplit.length==3)
rowsrange="range("+rowssplit[0]+","+rowssplit[2]+","+rowssplit[1]+")";var colssplit=colsrange.split(":");if(colssplit.length==2){if(colssplit[0]==""&&colssplit[1]=="")
colsrange="[]";else
colsrange="range("+colssplit[0]+","+colssplit[1]+")";}
else if(colssplit.length==3)
colsrange="range("+colssplit[0]+","+colssplit[2]+","+colssplit[1]+")";return "set( "+varname+","+rowsrange+","+colsrange+", ";}
else{var end=start;while(assign.indexOf("]",end+1)>=0)
end=assign.indexOf("]",end+1);var rowsrange=assign.substr(start+1,end-start-1);var rowssplit=rowsrange.split(":");if(rowssplit.length==2){if(rowssplit[0]==""&&rowssplit[1]=="")
rowsrange="[]";else
rowsrange="range("+rowssplit[0]+","+rowssplit[1]+")";}
else if(rowssplit.length==3)
rowsrange="range("+rowssplit[0]+","+rowssplit[2]+","+rowssplit[1]+")";return "set( "+varname+","+rowsrange+", ";}}}
function parseBrackets(cmdString){var delimiters=["[","(",",",";",")","\\","+","-","*","/",":","^","'","=",">","<","!"];cmdString=cmdString.split("][").join(",");var cmd=cmdString.split("");var i;var j;var k;var l;var lhs;i=cmd.length-1;while(i>=0){while(i>=0&&cmd[i]!="[")
i--;if(i>=0){j=i+1;while(j<cmd.length&&cmd[j]!="]")
j++;if(j<cmd.length){l=0;k=0;while(k<i){if(delimiters.indexOf(cmd[k])>=0)
l=k+1;k++;}
lhs=cmd.slice(l,i).join("");if(removeSpaces(lhs)==""){cmd[i]="#";k=i+1;var rowwise=false;var colwise=false;while(k<j){if(cmd[k]==","){}
if(cmd[k]==";"){rowwise=true;if(colwise){cmd.splice(k,1,["@",","]);colwise=false;}
else{cmd[k]=",";}}
k++;}
if(rowwise)
cmd[j]="$";else
cmd[j]="@";}
else{cmd[l]="get("+lhs;for(k=l+1;k<i;k++)
cmd[k]="";cmd[i]=",";cmd[j]=")";}}
else{return undefined;}}
i--;}
var cmdparsed=cmd.join("").split("#").join("mat([").split("$").join("], true)").split("@").join("])");return cmdparsed;}
function parseCommand(cmdString){var idxComments=cmdString.indexOf("//");if(idxComments>=0)
cmdString=cmdString.substr(0,idxComments);var idxEqual=cmdString.split("==")[0].split("!=")[0].split(">=")[0].split("<=")[0].indexOf("=");if(idxEqual>0){var assignmentStr=parseAssignment(cmdString.substr(0,idxEqual+1));var computeStr=cmdString.substr(idxEqual+1);if(assignmentStr.indexOf("set(")<0&&typeof(self[removeSpaces(computeStr)])!="undefined"){if(!isScalar(self[removeSpaces(computeStr)])){var FinalCommand=assignmentStr+"matrixCopy("+computeStr+")";console.log(FinalCommand);return FinalCommand;}}}
else{var assignmentStr="";var computeStr=cmdString;}
var cmd=parseBrackets(computeStr).split("");var startdelimiters=["(","[",",",";"];var enddelimiters=[")","]",",",";"];var i;var j;var k;var parsedContent="";var parsedCommand=new Array(cmd.length);var map=new Array(cmd.length);for(k=0;k<cmd.length;k++){map[k]=k;parsedCommand[k]=cmd[k];}
i=cmd.length-1;while(i>=0){while(i>=0&&startdelimiters.indexOf(cmd[i])<0)
i--;if(i>=0){j=i+1;while(j<cmd.length&&enddelimiters.indexOf(cmd[j])<0){j++;}
if(j<cmd.length){parsedContent=parseSplittedCommand(parsedCommand.slice(map[i]+1,map[j]).join(""));parsedCommand.splice(map[i]+1,map[j]-map[i]-1,parsedContent);if(cmd[i]!=",")
cmd[i]=" ";cmd[j]=" ";for(k=i+1;k<j;k++)
map[k]=map[i]+1;var deltamap=map[j]-map[i]-1;for(k=j;k<cmd.length;k++)
map[k]+=1-deltamap;}
else{return "undefined";}}
i--;}
var FinalCommand=assignmentStr+parseSplittedCommand(parsedCommand.join(""));if(assignmentStr.substr(0,4)=="set(")
FinalCommand+=" )";FinalCommand=parseRangeRange(FinalCommand);console.log(FinalCommand);return FinalCommand;}
function parseRangeRange(cmd){var elems=cmd.split("range(range(");var i;var j;var tmp;var args;var incargs;var endargs;for(i=0;i<elems.length-1;i++){args=elems[i+1].split(",");tmp=args[2].split(")");endargs=tmp[0];j=0;while(tmp[j].indexOf("(")>=0){endargs=endargs+")"+tmp[j+1];j++;}
incargs=args[1].substr(0,args[1].length-1);args[1]=endargs;args[2]=incargs+")"+tmp.slice(j+1).join(")");elems[i+1]=args.join(",");}
return elems.join("range(");}
function removeSpaces(str){return str.split(" ").join("");}
function MLlab(id,path){var that=new Lalolab(id,true,path);return that;}
function Lalolab(id,mllab,path){this.id=id;this.callbacks=new Array();if(typeof(path)=="undefined")
var path="http://mlweb.loria.fr/";else{if(path.length>0&&path[path.length-1]!="/")
path=[path,"/"].join("");}
if(typeof(mllab)!="undefined"&&mllab){this.worker=new Worker(path+"mlworker.js");this.labtype="ml";}
else{this.worker=new Worker(path+"lalolibworker.js");this.labtype="lalo";}
this.worker.onmessage=this.onresult;this.worker.parent=this;}
Lalolab.prototype.close=function(){this.worker.terminate();this.worker.parent=null;}
Lalolab.prototype.onprogress=function(ratio){}
Lalolab.prototype.onresult=function(WorkerEvent){if(typeof(WorkerEvent.data.progress)!="undefined"){this.parent.onprogress(WorkerEvent.data.progress);}
else{var cb=this.parent.callbacks.splice(0,1)[0];if(typeof(cb)=="function"){var WorkerCommand=WorkerEvent.data.cmd;var WorkerResult=WorkerEvent.data.output;cb(WorkerResult,WorkerCommand,this.parent.id);}}}
Lalolab.prototype.do=function(cmd,callback){this.callbacks.push(callback);this.worker.postMessage({cmd:cmd,parse:true});}
Lalolab.prototype.exec=function(cmd,callback){this.callbacks.push(callback);this.worker.postMessage({cmd:cmd,parse:false});}
Lalolab.prototype.parse=function(cmd,callback){this.callbacks.push(callback);this.worker.postMessage({cmd:cmd,parse:false});}
Lalolab.prototype.load=function(data,varname,callback){this.callbacks.push(callback);if(typeof(data)=="string"){this.worker.postMessage({"cmd":varname+"= load_data (\""+data+"\")",parse:false});}
else{this.worker.postMessage({"cmd":"load_mat",data:data,varname:varname,parse:false});}}
Lalolab.prototype.import=function(script,callback){this.do('importLaloScript("'+script+'")',callback);}
function importLaloScript(script){var xhr=new XMLHttpRequest();xhr.open('GET',script,false);xhr.send();var cmd=xhr.responseText;return lalo(cmd);}
Lalolab.prototype.importjs=function(script,callback){this.exec("importScripts('"+script+"');",callback);}
Lalolab.prototype.getObject=function(varname,callback){this.exec("getObjectWithoutFunc("+varname+")",function(res){callback(renewObject(res));});}
function getObjectWithoutFunc(obj){if(typeof(obj)!="object")
return obj;else{var res={};for(var p in obj){switch(type(obj[p])){case "vector":res[p]={type:"vector",data:[].slice.call(obj[p])};break;case "matrix":res[p]=obj[p];res[p].val=[].slice.call(obj[p].val);break;case "spvector":res[p]=obj[p];res[p].val=[].slice.call(obj[p].val);res[p].ind=[].slice.call(obj[p].ind);break;case "spmatrix":res[p]=obj[p];res[p].val=[].slice.call(obj[p].val);res[p].cols=[].slice.call(obj[p].cols);res[p].rows=[].slice.call(obj[p].rows);break;case "undefined":res[p]=obj[p];break;case "function":break;case "Array":res[p]=getObjectWithoutFunc(obj[p]);res[p].type="Array";res[p].length=obj[p].length;break;default:res[p]=getObjectWithoutFunc(obj[p]);break;}}
return res;}}
function renewObject(obj){var to=type(obj);switch(to){case "number":case "boolean":case "string":case "undefined":return obj;break;case "vector":return new Float64Array(obj.data);break;case "matrix":return new Matrix(obj.m,obj.n,obj.val);break;case "spvector":return new spVector(obj.length,obj.val,obj.ind);break;case "spmatrix":return new spMatrix(obj.m,obj.n,obj.val,obj.cols,obj.rows);break;case "object":var newobj={};for(var p in obj)
newobj[p]=renewObject(obj[p]);return newobj;break;case "Array":var newobj=new Array(obj.length);for(var p in obj)
newobj[p]=renewObject(obj[p]);return newobj;default:var typearray=obj.type.split(":");var Class=eval(typearray[0]);if(typearray.length==1)
var newobj=new Class();else
var newobj=new Class(typearray[1]);for(var p in obj)
newobj[p]=renewObject(obj[p]);if(typearray[1]=="SVM"||typearray[1]=="SVR"){newobj["kernelFunc"]=kernelFunction(newobj["kernel"],newobj["kernelpar"],type(newobj["SV"])=="spmatrix"?"spvector":"vector");}
if(typearray[1]=="KernelRidgeRegression"){newobj["kernelFunc"]=kernelFunction(newobj["kernel"],newobj["kernelpar"],type(newobj["X"])=="spmatrix"?"spvector":"vector");}
return newobj;break;}}
function load_data(datastring){var i;var cmd="mat( [ ";var row;var rows=datastring.split("\n");var ri;for(i=0;i<rows.length-1;i++){ri=removeFirstSpaces(rows[i]);if(ri!=""){row=ri.replace(/,/g," ").replace(/ +/g,",");cmd+="new Float64Array(["+row+"]) ,";}}
ri=removeFirstSpaces(rows[rows.length-1]);if(ri!=""){row=ri.replace(/,/g," ").replace(/ +/g,",");cmd+="new Float64Array(["+row+"]) ] , true) ";}
else{cmd=cmd.substr(0,cmd.length-1);cmd+="] , true) ";}
return eval(cmd);}
function removeFirstSpaces(str){var i=0;while(i<str.length&&str[i]==" ")
i++;if(i<str.length){return str.slice(i);}
else
return "";}
function notifyProgress(ratio){postMessage({"progress":ratio});console.log("progress: "+ratio);}
var LALOLIB_ERROR="";const EPS=2.2205e-16;function isZero(x){return(Math.abs(x)<EPS);}
function isInteger(x){return(Math.floor(x)==x);}
function tic(T){if(typeof(TICTOCstartTime)=="undefined")
TICTOCstartTime=new Array();if(typeof(T)=="undefined")
var T=0;TICTOCstartTime[T]=new Date();}
function toc(T){if(typeof(T)=="undefined")
var T=0;if(typeof(TICTOCstartTime)!="undefined"&&typeof(TICTOCstartTime[T])!="undefined"){var startTime=TICTOCstartTime[T];var endTime=new Date();var time=(endTime-startTime)/1000;return time;}
else
return undefined;}
function type(X){if(X==null)
return "undefined";else if(X.type)
return X.type;else{var t=typeof(X);if(t=="object"){if(Array.isArray(X)){if(isArrayOfNumbers(X))
return "vector";else
return "Array";}
else if(X.buffer)
return "vector";else
return t;}
else
return t;}}
function isArrayOfNumbers(A){for(var i=0;i<A.length;i++)
if(typeof(A[i])!="number")
return false;return true;}
function isScalar(x){switch(typeof(x)){case "string":case "number":case "boolean":return true;break;default:if(type(x)=="Complex")
return true;else
return false;break;}}
function printVector(x){const n=x.length;var str="[ ";var i=0;while(i<n-1&&i<5){str+=(isInteger(x[i])?x[i]:x[i].toFixed(3))+"; ";i++;}
if(i==n-1)
str+=(isInteger(x[i])?x[i]:x[i].toFixed(3))+" ]";else
str+="... ] (length = "+n+")";return str;}
function Matrix(m,n,values){this.length=m;this.m=m;this.n=n;this.size=[m,n];this.type="matrix";if(arguments.length==2)
this.val=new Float64Array(m*n);else if(arguments.length==3)
this.val=new Float64Array(values);else if(arguments.length==4)
this.val=values;}
Matrix.prototype.get=function(i,j){return this.val[i*this.n+j];}
Matrix.prototype.set=function(i,j,v){this.val[i*this.n+j]=v;}
Matrix.prototype.row=function(i){return this.val.subarray(i*this.n,(i+1)*this.n);}
Matrix.prototype.toArray=function(){var A=new Array(this.m);var ri=0;for(var i=0;i<this.m;i++){A[i]=new Array(this.n);for(var j=0;j<this.n;j++)
A[i][j]=this.val[ri+j];ri+=this.n;}
return A;}
Matrix.prototype.toArrayOfFloat64Array=function(){var A=new Array(this.m);for(var i=0;i<this.m;i++)
A[i]=this.val.subarray(i*this.n,(i+1)*this.n);return A;}
function array2mat(A){return mat(A,true);}
function array2vec(a){return vectorCopy(a);}
function vec2array(a){return Array.apply([],a);}
function size(A,sizealongdimension){var s;switch(type(A)){case "string":case "boolean":case "number":case "Complex":s=[1,1];break;case "vector":case "spvector":case "ComplexVector":s=[A.length,1];break;case "matrix":case "spmatrix":case "ComplexMatrix":s=A.size;break;case "object":s=[1,1];break;default:s=[1,1];break;}
if(typeof(sizealongdimension)=="undefined")
return s;else
return s[sizealongdimension-1];}
function ones(rows,cols){if(arguments.length==1||cols==1){var v=new Float64Array(rows);for(var i=0;i<rows;i++)
v[i]=1;return v;}
else{var M=new Matrix(rows,cols);const mn=rows*cols;for(var i=0;i<mn;i++){M.val[i]=1;}
return M;}}
function zeros(rows,cols){if(arguments.length==1||cols==1){return new Float64Array(rows);}
else{return new Matrix(rows,cols);}}
function eye(m,n){if(typeof(n)=="undefined")
var n=m;if(m==1&&n==1)
return 1;var I=zeros(m,n);const e=(m<n)?m:n;for(var i=0;i<e;i++){I.val[i*(n+1)]=1;}
return I;}
function diag(A){var i;var typeA=type(A);if(typeA=="vector"){var M=zeros(A.length,A.length);var j=0;const stride=A.length+1;for(i=0;i<A.length;i++){M.val[j]=A[i];j+=stride;}
return M;}
else if(typeA=="matrix"){var n=Math.min(A.m,A.n);var v=new Float64Array(n);var j=0;const stride2=A.n+1;for(i=0;i<n;i++){v[i]=A.val[j];j+=stride2;}
return v;}
else if(typeA=="ComplexVector"){var M=new ComplexMatrix(A.length,A.length);var j=0;const stride=A.length+1;for(i=0;i<A.length;i++){M.re[j]=A.re[i];M.im[j]=A.im[i];j+=stride;}
return M;}
else if(typeA=="ComplexMatrix"){var n=Math.min(A.m,A.n);var v=new ComplexVector(n);var j=0;const stride2=A.n+1;for(i=0;i<n;i++){v.re[i]=A.re[j];v.im[i]=A.im[j];j+=stride2;}
return v;}}
function vec(A){return new Float64Array(A.val);}
function matrixCopy(A){var t=type(A);switch(t){case "vector":return vectorCopy(A);break;case "ComplexVector":return new ComplexVector(A);break;case "matrix":return new Matrix(A.m,A.n,A.val);break;case "ComplexMatrix":return new ComplexMatrix(A);break;case "Array":return arrayCopy(A);break;case "spvector":case "spmatrix":return A.copy();break;default:error("Error in matrixCopy(A): A is not a matrix nor a vector.");return undefined;break;}}
function vectorCopy(a){return new Float64Array(a);}
function vectorCopyInto(x,y){y.set(x);}
function arrayCopy(A){var res=new Array(A.length);for(var i=0;i<A.length;i++)
if(isScalar(A[i]))
res[i]=A[i];else
res[i]=matrixCopy(A[i]);return res;}
function appendRow(A){var Aa=zeros(A.m+1,A.n);Aa.val.set(A.val);return Aa;}
function reshape(A,m,n){var R=undefined;var tA=type(A);if(tA=="vector"){if(m*n!=A.length){error("Error in reshape(a,m,n): a.length = "+A.length+" != m*n");}
else{R=new Matrix(m,n,A);}}
else if(tA=="matrix"){if(m*n!=A.m*A.n){error("Error in reshape(A,m,n): A.m * A.n = "+A.m*A.n+" != m*n");}
else{if(n==1)
R=vectorCopy(A.val);else
R=new Matrix(m,n,A.val);}}
else
error("Error in reshape(A): A is neither a vector nor a matrix.");return R;}
function get(A,rowsrange,colsrange){var typerows=typeof(rowsrange);var typecols=typeof(colsrange);if(arguments.length==1)
return matrixCopy(A);var typeA=type(A);if(typeA=="vector"){if(typerows=="number"){if(rowsrange>=0&&rowsrange<A.length)
return A[rowsrange];else{error("Error in a[i] = get(a,i): Index i="+rowsrange+" out of bounds [0,"+(A.length-1)+"]");return undefined;}}
else{return getSubVector(A,rowsrange);}}
else if(typeA=="matrix"){if(typerows=="number")
rowsrange=[rowsrange];if(typecols=="number")
colsrange=[colsrange];if(rowsrange.length==1&&colsrange.length==1)
return A.val[rowsrange[0]*A.n+colsrange[0]];if(rowsrange.length==0)
return getCols(A,colsrange);if(colsrange.length==0)
return getRows(A,rowsrange);return getSubMatrix(A,rowsrange,colsrange);}
else if(typeA=="Array"){if(typerows=="number")
return A[rowsrange];else
return getSubArray(A,rowsrange);}
else if(typeA=="spmatrix"){if(typerows=="number")
rowsrange=[rowsrange];if(typecols=="number")
colsrange=[colsrange];if(rowsrange.length==1&&colsrange.length==1)
return A.get(rowsrange[0],colsrange[0]);if(rowsrange.length==1&&A.rowmajor)
return A.row(rowsrange[0]);if(colsrange.length==1&&!A.rowmajor)
return A.col(colsrange[0]);if(colsrange.length==0)
return spgetRows(A,rowsrange);if(rowsrange.length==0)
return spgetCols(A,colsrange);}
else if(typeA=="spvector"){if(typerows=="number")
return A.get(rowsrange);else
return getSubspVector(A,rowsrange);}
else if(typeA=="ComplexVector"){if(typerows=="number")
return A.get(rowsrange);else
return A.getSubVector(rowsrange);}
else if(typeA=="ComplexMatrix"){if(typerows=="number")
rowsrange=[rowsrange];if(typecols=="number")
colsrange=[colsrange];if(rowsrange.length==1&&colsrange.length==1)
return A.get(i,j);if(rowsrange.length==0)
return A.getCols(colsrange);if(colsrange.length==0)
return A.getRows(rowsrange);return A.getSubMatrix(rowsrange,colsrange);}
return undefined;}
function getSubMatrix(A,rowsrange,colsrange){var n=colsrange.length;var i;var j;var res;if(n==1){res=new Float64Array(rowsrange.length);for(i=0;i<rowsrange.length;i++){res[i]=A.val[rowsrange[i]*A.n+colsrange[0]];}}
else{res=new Matrix(rowsrange.length,n);var r=0;for(i=0;i<rowsrange.length;i++){var rA=rowsrange[i]*A.n;for(j=0;j<n;j++){res.val[r+j]=A.val[rA+colsrange[j]];}
r+=n;}}
return res;}
function getRows(A,rowsrange){var n=rowsrange.length;if(n>1){var res=new Matrix(n,A.n);var r=0;for(var i=0;i<n;i++){for(var j=0;j<A.n;j++)
res.val[r+j]=A.val[rowsrange[i]*A.n+j];r+=A.n;}
return res;}
else
return vectorCopy(A.val.subarray(rowsrange[0]*A.n,rowsrange[0]*A.n+A.n));}
function getCols(A,colsrange){var m=A.m;var n=colsrange.length;if(n>1){var res=new Matrix(m,n);var r=0;var rA=0;for(var i=0;i<m;i++){for(var j=0;j<n;j++)
res.val[r+j]=A.val[rA+colsrange[j]];r+=n;rA+=A.n;}
return res;}
else{var res=new Float64Array(m);var r=0;for(var i=0;i<m;i++){res[i]=A.val[r+colsrange[0]];r+=A.n;}
return res;}}
function getSubVector(a,rowsrange){const n=rowsrange.length;var res=new Float64Array(n);for(var i=0;i<n;i++){res[i]=a[rowsrange[i]];}
return res;}
function getSubArray(a,rowsrange){const n=rowsrange.length;var res=new Array(n);for(var i=0;i<n;i++){res[i]=a[rowsrange[i]];}
return res;}
function getrowref(A,i){return A.val.subarray(i*A.n,(i+1)*A.n);}
function set(A,rowsrange,colsrange,B){var i;var j;var k;var l;var n;var typerows=typeof(rowsrange);var typecols=typeof(colsrange);if(arguments.length==1)
return undefined;var typeA=type(A);if(typeA=="vector"){B=colsrange;if(typerows=="number"){A[rowsrange]=B;return B;}
else if(rowsrange.length==0)
rowsrange=range(A.length);if(size(B,1)==1){setVectorScalar(A,rowsrange,B);}
else{setVectorVector(A,rowsrange,B);}
return B;}
else if(typeA=="matrix"){if(typerows=="number")
rowsrange=[rowsrange];if(typecols=="number")
colsrange=[colsrange];if(rowsrange.length==1&&colsrange.length==1){A.val[rowsrange[0]*A.n+colsrange[0]]=B;return B;}
if(rowsrange.length==0){setCols(A,colsrange,B);return B;}
if(colsrange.length==0){setRows(A,rowsrange,B);return B;}
var sB=size(B);var tB=type(B);if(sB[0]==1&&sB[1]==1){if(tB=="number")
setMatrixScalar(A,rowsrange,colsrange,B);else if(tB=="vector")
setMatrixScalar(A,rowsrange,colsrange,B[0]);else
setMatrixScalar(A,rowsrange,colsrange,B.val[0]);}
else{if(colsrange.length==1)
setMatrixColVector(A,rowsrange,colsrange[0],B);else if(rowsrange.length==1){if(tB=="vector")
setMatrixRowVector(A,rowsrange[0],colsrange,B);else
setMatrixRowVector(A,rowsrange[0],colsrange,B.val);}
else
setMatrixMatrix(A,rowsrange,colsrange,B);}
return B;}
else if(typeA=="ComplexVector"){B=colsrange;if(typerows=="number"){A.set(rowsrange,B);return B;}
else if(rowsrange.length==0)
rowsrange=range(A.length);if(size(B,1)==1){A.setVectorScalar(rowsrange,B);}
else{A.setVectorVector(rowsrange,B);}
return B;}}
function setVectorScalar(A,rowsrange,B){var i;for(i=0;i<rowsrange.length;i++)
A[rowsrange[i]]=B;}
function setVectorVector(A,rowsrange,B){var i;for(i=0;i<rowsrange.length;i++)
A[rowsrange[i]]=B[i];}
function setMatrixScalar(A,rowsrange,colsrange,B){var i;var j;var m=rowsrange.length;var n=colsrange.length;for(i=0;i<m;i++)
for(j=0;j<n;j++)
A.val[rowsrange[i]*A.n+colsrange[j]]=B;}
function setMatrixMatrix(A,rowsrange,colsrange,B){var i;var j;var m=rowsrange.length;var n=colsrange.length;for(i=0;i<m;i++)
for(j=0;j<n;j++)
A.val[rowsrange[i]*A.n+colsrange[j]]=B.val[i*B.n+j];}
function setMatrixColVector(A,rowsrange,col,B){var i;var m=rowsrange.length;for(i=0;i<m;i++)
A.val[rowsrange[i]*A.n+col]=B[i];}
function setMatrixRowVector(A,row,colsrange,B){var j;var n=colsrange.length;for(j=0;j<n;j++)
A.val[row*A.n+colsrange[j]]=B[j];}
function setRows(A,rowsrange,B){var i;var j;var m=rowsrange.length;var rA;switch(type(B)){case "vector":for(i=0;i<m;i++){rA=rowsrange[i]*A.n;for(j=0;j<B.length;j++)
A.val[rA+j]=B[j];}
break;case "matrix":var rB=0;for(i=0;i<m;i++){rA=rowsrange[i]*A.n;for(j=0;j<B.n;j++)
A.val[rA+j]=B.val[rB+j];rB+=B.n;}
break;default:for(i=0;i<m;i++){rA=rowsrange[i]*A.n;for(j=0;j<A.n;j++)
A.val[rA+j]=B;}
break;}}
function setCols(A,colsrange,B){var i;var m=A.m;var n=colsrange.length;var r=0;switch(type(B)){case "vector":for(i=0;i<m;i++){for(j=0;j<n;j++)
A.val[r+colsrange[j]]=B[i];r+=A.n;}
break;case "matrix":for(i=0;i<m;i++){for(j=0;j<n;j++)
A.val[r+colsrange[j]]=B.val[i*B.n+j];r+=A.n;}
break;default:for(i=0;i<m;i++){for(j=0;j<n;j++)
A.val[r+colsrange[j]]=B;r+=A.n;}
break;}}
function dense(A){return A;}
function supp(x){const tx=type(x);if(tx=="vector"){var indexes=[];var i;for(i=0;i<x.length;i++){if(!isZero(x[i]))
indexes.push(i);}
return indexes;}
else if(tx=="spvector"){return new Float64Array(x.ind);}
else
return undefined;}
function range(start,end,inc){if(typeof(start)=="undefined")
return[];if(typeof(inc)=="undefined")
var inc=1;if(typeof(end)=="undefined"){var end=start;start=0;}
if(start==end-inc){return start;}
else if(start==end){return[];}
else if(start>end){if(inc>0)
inc*=-1;var r=new Array(Math.floor((start-end)/Math.abs(inc)));var k=0;for(var i=start;i>end;i+=inc){r[k]=i;k++;}}
else{var r=new Array(Math.floor((end-start)/inc));var k=0;for(var i=start;i<end;i+=inc){r[k]=i;k++;}}
return r;}
function swaprows(A,i,j){if(i!=j){var ri=i*A.n;var rj=j*A.n;var tmp=vectorCopy(A.val.subarray(ri,ri+A.n));A.val.set(vectorCopy(A.val.subarray(rj,rj+A.n)),ri);A.val.set(tmp,rj);}}
function swapcols(A,j,k){if(j!=k){var tmp=getCols(A,[j]);setCols(A,[j],getCols(A,[k]));setCols(A,[k],tmp);}}
function randnScalar(){var x1;var x2;var w;var y1;var y2;do{x1=2.0*Math.random()-1.0;x2=2.0*Math.random()-1.0;w=x1*x1+x2*x2;}while(w>=1.0);w=Math.sqrt((-2.0*Math.log(w))/w);y1=x1*w;y2=x2*w;return y1;}
function randn(dim1,dim2){var res;if(typeof(dim1)=="undefined"||(dim1==1&&typeof(dim2)=="undefined")||(dim1==1&&dim2==1)){return randnScalar();}
else if(typeof(dim2)=="undefined"||dim2==1){res=new Float64Array(dim1);for(var i=0;i<dim1;i++)
res[i]=randnScalar();return res;}
else{res=zeros(dim1,dim2);for(var i=0;i<dim1*dim2;i++){res.val[i]=randnScalar();}
return res;}}
function randVector(dim1){var res=new Float64Array(dim1);for(var i=0;i<dim1;i++){res[i]=Math.random();}
return res;}
function randMatrix(dim1,dim2){const n=dim1*dim2;var res=new Float64Array(n);for(var i=0;i<n;i++){res[i]=Math.random();}
return new Matrix(dim1,dim2,res,true);}
function rand(dim1,dim2){var res;if(typeof(dim1)=="undefined"||(dim1==1&&typeof(dim2)=="undefined")||(dim1==1&&dim2==1)){return Math.random();}
else if(typeof(dim2)=="undefined"||dim2==1){return randVector(dim1);}
else{return randMatrix(dim1,dim2);}}
function randnsparse(NZratio,dim1,dim2){var NZ;if(NZratio>1)
NZ=NZratio;else
NZ=Math.floor(NZratio*dim1*dim2);var indexes;var i;var j;var k;var res;if(typeof(dim1)=="undefined"){return randn();}
else if(typeof(dim2)=="undefined"||dim2==1){indexes=randperm(dim1);res=zeros(dim1);for(i=0;i<NZ;i++){res[indexes[i]]=randn();}
return res;}
else{res=zeros(dim1,dim2);indexes=randperm(dim1*dim2);for(k=0;k<NZ;k++){i=Math.floor(indexes[k]/dim2);j=indexes[k]-i*dim2;res.val[i*dim2+j]=randn();}
return res;}}
function randsparse(NZratio,dim1,dim2){if(typeof(dim2)=="undefined")
var dim2=1;var NZ;if(NZratio>1)
NZ=NZratio;else
NZ=Math.floor(NZratio*dim1*dim2);var indexes;var i;var j;var k;var res;if(typeof(dim1)=="undefined"){return randn();}
else if(dim2==1){indexes=randperm(dim1);res=zeros(dim1);for(i=0;i<NZ;i++){res[indexes[i]]=Math.random();}
return res;}
else{res=zeros(dim1,dim2);indexes=randperm(dim1*dim2);for(k=0;k<NZ;k++){i=Math.floor(indexes[k]/dim2);j=indexes[k]-i*dim2;res.val[i*dim2+j]=Math.random();}
return res;}}
function randperm(x){if(typeof(x)=="number"){var perm=range(x);}
else{var perm=new Float64Array(x);}
var i;var j;var k;for(i=perm.length-1;i>1;i--){j=Math.floor(Math.random()*i);k=perm[j];perm[j]=perm[i];perm[i]=k;}
return perm;}
var MathFunctions=Object.getOwnPropertyNames(Math);for(var mf in MathFunctions){if(eval("typeof(Math."+MathFunctions[mf]+")")=="function"){if(eval("Math."+MathFunctions[mf]+".length")==1){eval(MathFunctions[mf]+" = function (x) { return apply(Math."+MathFunctions[mf]+" , x );};");eval(MathFunctions[mf]+"Vector = function (x) { return applyVector(Math."+MathFunctions[mf]+" , x );};");eval(MathFunctions[mf]+"Matrix = function (x) { return applyMatrix(Math."+MathFunctions[mf]+" , x );};");}}
else if(eval("typeof(Math."+MathFunctions[mf]+")")=="number"){eval(MathFunctions[mf]+" = Math."+MathFunctions[mf]);}}
function apply(f,x){if(typeof(f)!="function")
return undefined;switch(type(x)){case "number":return f(x);break;case "Complex":var ComplexFunctions=["exp","abs"];var fc=ComplexFunctions.indexOf(f.name);if(fc>=0)
return eval(ComplexFunctions[fc]+"Complex(x);");else{error("This function has no Complex counterpart (yet).");return undefined;}
break;case "vector":return applyVector(f,x);break;case "spvector":return applyspVector(f,x);break;case "ComplexVector":if(f.name=="abs")
return absComplex(x);else
return applyComplexVector(f,x);break;case "matrix":return applyMatrix(f,x);break;case "spmatrix":return applyspMatrix(f,x);break;case "ComplexMatrix":if(f.name=="abs")
return absComplex(x);else
return applyComplexMatrix(f,x);break;default:return "undefined";}}
function applyVector(f,x){const nv=x.length;var res=new Float64Array(nv);for(var i=0;i<nv;i++)
res[i]=f(x[i]);return res;}
function applyComplexVector(f,x){const nv=x.length;var res=new ComplexVector(nv);for(var i=0;i<nv;i++)
res.set(i,f(x.get(i)));return res;}
function applyComplexMatrix(f,x){const m=x.m;const n=x.n;var res=new ComplexMatrix(m,n);for(var i=0;i<m;i++)
for(var j=0;j<n;j++)
res.set(i,j,f(x.get(i,j)));return res;}
function applyMatrix(f,x){return new Matrix(x.m,x.n,applyVector(f,x.val),true);}
function mul(a,b){var sa=size(a);var sb=size(b);if(!isScalar(a)&&sa[0]==1&&sa[1]==1)
a=get(a,0,0);if(!isScalar(b)&&sb[0]==1&&sb[1]==1)
b=get(b,0,0);switch(type(a)){case "number":switch(type(b)){case "number":return a*b;break;case "Complex":return mulComplexReal(b,a);break;case "vector":return mulScalarVector(a,b);break;case "spvector":return mulScalarspVector(a,b);break;case "ComplexVector":return mulScalarComplexVector(a,b);break;case "matrix":return mulScalarMatrix(a,b);break;case "spmatrix":return mulScalarspMatrix(a,b);break;case "ComplexMatrix":return mulScalarComplexMatrix(a,b);break;default:return undefined;break;}
break;case "Complex":switch(type(b)){case "number":return mulComplexReal(a,b);break;case "Complex":return mulComplex(a,b);break;case "vector":return mulComplexVector(a,b);break;case "ComplexVector":return mulComplexComplexVector(a,b);break;case "spvector":return mulComplexspVector(a,b);break;case "matrix":return mulComplexMatrix(a,b);break;case "ComplexMatrix":return mulComplexComplexMatrix(a,b);break;case "spmatrix":return mulComplexspMatrix(a,b);break;default:return undefined;break;}
break;case "vector":switch(type(b)){case "number":return mulScalarVector(b,a);break;case "Complex":return mulComplexVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dot(a,b);break;case "spvector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dotspVectorVector(b,a);break;case "ComplexVector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dotComplexVectorVector(b,a);break;case "matrix":if(b.m==1)
return outerprodVectors(a,b.val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;case "spmatrix":if(b.m==1)
return outerprodVectors(a,fullMatrix(b).val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;case "ComplexMatrix":if(b.m==1)
return transpose(outerprodComplexVectorVector(new ComplexVector(b.re,b.im,true),a,b.val));else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;default:return undefined;break;}
break;case "spvector":switch(type(b)){case "number":return mulScalarspVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dotspVectorVector(a,b);break;case "spvector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return spdot(b,a);break;case "matrix":if(b.m==1)
return outerprodspVectorVector(a,b.val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;case "spmatrix":if(b.m==1)
return outerprodspVectorVector(a,fullMatrix(b).val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;default:return undefined;break;}
break;case "ComplexVector":switch(type(b)){case "number":return mulScalarComplexVector(b,a);break;case "Complex":return mulComplexComplexVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dotComplexVectorVector(a,b);break;case "spvector":if(a.length!=b.length){error("Error in mul(a,b) (dot product): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return dotComplexVectorspVector(a,b);break;case "matrix":if(b.m==1)
return outerprodComplexVectorVector(a,b.val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;case "spmatrix":if(b.m==1)
return outerprodComplexVectorVector(a,fullMatrix(b).val);else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;case "ComplexMatrix":if(b.m==1)
return outerprodComplexVectors(a,new ComplexVector(b.re,b.im,true));else{error("Inconsistent dimensions in mul(a,B): size(a) = ["+sa[0]+","+sa[1]+"], size(B) = ["+sb[0]+","+sb[1]+"]");return undefined;}
break;default:return undefined;break;}
break;case "matrix":switch(type(b)){case "number":return mulScalarMatrix(b,a);break;case "Complex":return mulComplexMatrix(b,a);break;case "vector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dot(a.val,b);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulMatrixVector(a,b);}
break;case "spvector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotspVectorVector(b,a.val);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulMatrixspVector(a,b);}
break;case "ComplexVector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotComplexVectorVector(b,a.val);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulMatrixComplexVector(a,b);}
break;case "matrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulMatrixMatrix(a,b);break;case "spmatrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulMatrixspMatrix(a,b);break;case "ComplexMatrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return transpose(mulComplexMatrixMatrix(transpose(b),transpose(a)));break;default:return undefined;break;}
break;case "spmatrix":switch(type(b)){case "number":return mulScalarspMatrix(b,a);break;case "vector":if(a.m==1){if(a.n!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dot(fullMatrix(a).val,b);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulspMatrixVector(a,b);}
break;case "spvector":if(a.m==1){if(a.n!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotspVectorVector(b,fullMatrix(a).val);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulspMatrixspVector(a,b);}
break;case "matrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulspMatrixMatrix(a,b);break;case "spmatrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulspMatrixspMatrix(a,b);break;default:return undefined;break;}
break;case "ComplexMatrix":switch(type(b)){case "number":return mulScalarComplexMatrix(b,a);break;case "Complex":return mulComplexComplexMatrix(b,a);break;case "vector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotComplexVectorVector(new ComplexVector(a.re,a.im,true),b);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulComplexMatrixVector(a,b);}
break;case "spvector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotComplexVectorspVector(new ComplexVector(a.re,a.im,true),b);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulComplexMatrixspVector(a,b);}
break;case "ComplexVector":if(a.m==1){if(a.val.length!=b.length){error("Error in mul(a',b): a.length = "+a.val.length+" != "+b.length+" =  b.length.");return undefined;}
return dotComplexVectors(new ComplexVector(a.re,a.im,true),b);}
else{if(a.n!=b.length){error("Error in mul(A,b): A.n = "+a.n+" != "+b.length+" = b.length.");return undefined;}
return mulComplexMatrixComplexVector(a,b);}
break;case "matrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulComplexMatrixMatrix(a,b);break;case "spmatrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulComplexMatrixspMatrix(a,b);break;case "ComplexMatrix":if(a.n!=b.m){error("Error in mul(A,B): A.n = "+a.n+" != "+b.m+" = B.m.");return undefined;}
return mulComplexMatrices(a,b);break;default:return undefined;break;}
break;default:return undefined;break;}}
function mulScalarVector(scalar,vec){var i;const n=vec.length;var res=new Float64Array(vec);for(i=0;i<n;i++)
res[i]*=scalar;return res;}
function mulScalarMatrix(scalar,A){var res=new Matrix(A.m,A.n,mulScalarVector(scalar,A.val),true);return res;}
function dot(a,b){const n=a.length;var i;var res=0;for(i=0;i<n;i++)
res+=a[i]*b[i];return res;}
function mulMatrixVector(A,b){const m=A.length;var c=new Float64Array(m);var r=0;for(var i=0;i<m;i++){c[i]=dot(A.val.subarray(r,r+A.n),b);r+=A.n;}
return c;}
function mulMatrixTransVector(A,b){const m=A.length;const n=A.n;var c=new Float64Array(n);var rj=0;for(var j=0;j<m;j++){var bj=b[j];for(var i=0;i<n;i++){c[i]+=A.val[rj+i]*bj;}
rj+=A.n;}
return c;}
function mulMatrixMatrix(A,B){const m=A.length;const n=B.n;const n2=B.length;var Av=A.val;var Bv=B.val;var C=new Float64Array(m*n);var aik;var Aik=0;var Ci=0;for(var i=0;i<m;i++){var bj=0;for(var k=0;k<n2;k++){aik=Av[Aik];for(var j=0;j<n;j++){C[Ci+j]+=aik*Bv[bj];bj++;}
Aik++;}
Ci+=n;}
return new Matrix(m,n,C,true);}
function entrywisemulVector(a,b){var i;const n=a.length;var res=new Float64Array(n);for(i=0;i<n;i++)
res[i]=a[i]*b[i];return res;}
function entrywisemulMatrix(A,B){var res=new Matrix(A.m,A.n,entrywisemulVector(A.val,B.val),true);return res;}
function entrywisemul(a,b){var sa=size(a);var sb=size(b);if(typeof(a)!="number"&&sa[0]==1&&sa[1]==1)
a=get(a,0,0);if(typeof(b)!="number"&&sb[0]==1&&sb[1]==1)
b=get(b,0,0);switch(type(a)){case "number":switch(type(b)){case "number":return a*b;break;case "Complex":return mulComplexReal(b,a);break;case "vector":return mulScalarVector(a,b);break;case "spvector":return mulScalarspVector(a,b);break;case "ComplexVector":return mulScalarComplexVector(b,a);break;case "matrix":return mulScalarMatrix(a,b);break;case "spmatrix":return mulScalarspMatrix(a,b);break;case "ComplexMatrix":return mulScalarComplexMatrix(b,a);break;default:return undefined;break;}
break;case "vector":switch(type(b)){case "number":return mulScalarVector(b,a);break;case "Complex":return mulComplexVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulVector(a,b);break;case "ComplexVector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulComplexVectorVector(b,a);break;case "spvector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulspVectorVector(b,a);break;case "matrix":case "spmatrix":case "ComplexMatrix":error("Error in entrywisemul(a,B): a is a vector and B is a matrix.");return undefined;break;default:return undefined;break;}
break;case "spvector":switch(type(b)){case "number":return mulScalarspVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulspVectorVector(a,b);break;case "spvector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulspVectors(a,b);break;case "matrix":error("Error in entrywisemul(a,B): a is a vector and B is a Matrix.");return undefined;break;case "spmatrix":error("Error in entrywisemul(a,B): a is a vector and B is a Matrix.");return undefined;break;default:return undefined;break;}
break;case "matrix":switch(type(b)){case "number":return mulScalarMatrix(b,a);break;case "Complex":return mulComplexMatrix(b,a);break;case "vector":case "spvector":case "ComplexVector":error("Error in entrywisemul(A,b): A is a Matrix and b is a vector.");return undefined;break;case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulMatrix(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulspMatrixMatrix(b,a);break;case "ComplexMatrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulComplexMatrixMatrix(b,a);break;default:return undefined;break;}
break;case "spmatrix":switch(type(b)){case "number":return mulScalarspMatrix(b,a);break;case "vector":error("Error in entrywisemul(A,b): A is a Matrix and b is a vector.");return undefined;break;case "spvector":error("Error in entrywisemul(A,b): A is a Matrix and b is a vector.");return undefined;break;case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulspMatrixMatrix(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulspMatrices(a,b);break;default:return undefined;break;}
break;case "ComplexVector":switch(type(b)){case "number":return mulScalarComplexVector(b,a);break;case "Complex":return mulComplexComplexVector(b,a);break;case "vector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulComplexVectorVector(a,b);break;case "ComplexVector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulComplexVectors(a,b);break;case "spvector":if(a.length!=b.length){error("Error in entrywisemul(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return entrywisemulComplexVectorspVector(a,b);break;case "matrix":case "spmatrix":case "ComplexMatrix":error("Error in entrywisemul(a,B): a is a vector and B is a matrix.");return undefined;break;default:return undefined;break;}
break;case "ComplexMatrix":switch(type(b)){case "number":return mulScalarComplexMatrix(b,a);break;case "Complex":return mulComplexComplexMatrix(b,a);break;case "vector":case "spvector":case "ComplexVector":error("Error in entrywisemul(A,b): A is a Matrix and b is a vector.");return undefined;break;case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulComplexMatrixMatrix(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulComplexMatrixspMatrix(a,b);break;case "ComplexMatrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisemul(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return entrywisemulComplexMatrices(a,b);break;default:return undefined;break;}
break;default:return undefined;break;}}
function saxpy(a,x,y){const n=y.length;for(var i=0;i<n;i++)
y[i]+=a*x[i];}
function gaxpy(A,x,y){const m=A.m;const n=A.n;var r=0;for(var i=0;i<m;i++){y[i]+=dot(A.val.subarray(r,r+n),x);r+=n;}}
function divVectorScalar(a,b){var i;const n=a.length;var res=new Float64Array(a);for(i=0;i<n;i++)
res[i]/=b;return res;}
function divScalarVector(a,b){var i;const n=b.length;var res=new Float64Array(n);for(i=0;i<n;i++)
res[i]=a/b[i];return res;}
function divVectors(a,b){var i;const n=a.length;var res=new Float64Array(a);for(i=0;i<n;i++)
res[i]/=b[i];return res;}
function divMatrixScalar(A,b){var res=new Matrix(A.m,A.n,divVectorScalar(A.val,b),true);return res;}
function divScalarMatrix(a,B){var res=new Matrix(B.m,B.n,divScalarVector(a,B.val),true);return res;}
function divMatrices(A,B){var res=new Matrix(A.m,A.n,divVectors(A.val,B.val),true);return res;}
function entrywisediv(a,b){var ta=type(a);var tb=type(b);switch(ta){case "number":switch(tb){case "number":return a/b;break;case "vector":return divScalarVector(a,b);break;case "matrix":return divScalarMatrix(a,b);break;case "spvector":return divScalarspVector(a,b);break;case "spmatrix":return divScalarspMatrix(a,b);break;default:error("Error in entrywisediv(a,b): b must be a number, a vector or a matrix.");return undefined;}
break;case "vector":switch(tb){case "number":return divVectorScalar(a,b);break;case "vector":if(a.length!=b.length){error("Error in entrywisediv(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return divVectors(a,b);break;case "spvector":error("Error in entrywisediv(a,b): b is a sparse vector with zeros.");break;default:error("Error in entrywisediv(a,B): a is a vector and B is a "+tb+".");return undefined;}
break;case "spvector":switch(tb){case "number":return mulScalarspVector(1/b,a);break;case "vector":if(a.length!=b.length){error("Error in entrywisediv(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return divVectorspVector(a,b);break;case "spvector":error("Error in entrywisediv(a,b): b is a sparse vector with zeros.");return undefined;break;default:error("Error in entrywisediv(a,B): a is a vector and B is a "+tb+".");return undefined;}
break;case "matrix":switch(tb){case "number":return divMatrixScalar(a,b);break;case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisediv(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return divMatrices(a,b);break;case "spmatrix":error("Error in entrywisediv(A,B): B is a sparse matrix with zeros.");return undefined;break;default:error("Error in entrywisediv(A,b): a is a matrix and B is a "+tb+".");return undefined;}
case "spmatrix":switch(tb){case "number":return mulScalarspMatrix(1/b,a);break;case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in entrywisediv(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return divMatrixspMatrix(a,b);break;case "spmatrix":error("Error in entrywisediv(A,B): B is a sparse matrix with zeros.");return undefined;break;default:error("Error in entrywisediv(A,b): a is a matrix and B is a "+tb+".");return undefined;}
break;default:error("Error in entrywisediv(a,b): a must be a number, a vector or a matrix.");return undefined;break;}}
function outerprodVectors(a,b,scalar){var i;var j;var ui;const m=a.length;const n=b.length;var res=new Matrix(m,n);if(arguments.length==3){for(i=0;i<m;i++)
res.val.set(mulScalarVector(scalar*a[i],b),i*n);}
else{for(i=0;i<m;i++)
res.val.set(mulScalarVector(a[i],b),i*n);}
return res;}
function outerprod(u,v,scalar){if(typeof(u)=="number"){if(typeof(v)=="number"){if(arguments.length==2)
return u*v;else
return u*v*scalar;}
else{if(arguments.length==2)
return new Matrix(1,v.length,mulScalarVector(u,v),true);else
return new Matrix(1,v.length,mulScalarVector(u*scalar,v),true);}}
if(u.length==1){if(typeof(v)=="number"){if(arguments.length==2)
return u[0]*v;else
return u[0]*v*scalar;}
else{if(arguments.length==2)
return new Matrix(1,v.length,mulScalarVector(u[0],v),true);else
return new Matrix(1,v.length,mulScalarVector(u[0]*scalar,v),true);}}
if(typeof(v)=="number"){if(arguments.length==2)
return mulScalarVector(v,u);else
return mulScalarVector(scalar*v,u);}
if(v.length==1){if(arguments.length==2)
return mulScalarVector(v[0],u);else
return mulScalarVector(scalar*v[0],u);}
if(arguments.length==2)
return outerprodVectors(u,v);else
return outerprodVectors(u,v,scalar);}
function addScalarVector(scalar,vec){const n=vec.length;var res=new Float64Array(vec);for(var i=0;i<n;i++)
res[i]+=scalar;return res;}
function addScalarMatrix(a,B){return new Matrix(B.m,B.n,addScalarVector(a,B.val),true);}
function addVectors(a,b){const n=a.length;var c=new Float64Array(a);for(var i=0;i<n;i++)
c[i]+=b[i];return c;}
function addMatrices(A,B){return new Matrix(A.m,A.n,addVectors(A.val,B.val),true);}
function add(a,b){const ta=type(a);const tb=type(b);if(ta=="number"&&tb=="number"||ta=="string"||tb=="string")
return a+b;else if(ta=="number"){switch(tb){case "Complex":return addComplexReal(b,a);break;case "vector":return addScalarVector(a,b);break;case "matrix":return addScalarMatrix(a,b);break;case "spvector":return addScalarspVector(a,b);break;case "spmatrix":return addScalarspMatrix(a,b);break;case "ComplexVector":return addScalarComplexVector(a,b);break;case "ComplexMatrix":return addScalarComplexMatrix(a,b);break;default:return undefined;break;}}
else if(tb=="number"){switch(ta){case "Complex":return addComplexReal(a,b);break;case "vector":return addScalarVector(b,a);break;case "matrix":return addScalarMatrix(b,a);break;case "spvector":return addScalarspVector(b,a);break;case "spmatrix":return addScalarspMatrix(b,a);break;case "ComplexVector":return addScalarComplexVector(b,a);break;case "ComplexMatrix":return addScalarComplexMatrix(b,a);break;default:return undefined;break;}}
else if(ta=="vector"){switch(tb){case "vector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addVectors(a,b);break;case "spvector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addVectorspVector(a,b);break;case "ComplexVector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addComplexVectorVector(b,a);break;case "matrix":case "spmatrix":default:error("Error in add(a,B): a is a vector and B is a "+tb+".");return undefined;break;}}
else if(ta=="matrix"){switch(tb){case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addMatrices(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addMatrixspMatrix(a,b);break;case "ComplexMatrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addComplexMatrixMatrix(b,a);break;case "vector":case "spvector":default:error("Error in add(A,b): a is a matrix and B is a "+tb+".");return undefined;break;}}
else if(ta=="spvector"){switch(tb){case "vector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addVectorspVector(b,a);break;case "spvector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addspVectors(a,b);break;case "matrix":case "spmatrix":default:error("Error in add(a,B): a is a sparse vector and B is a "+tb+".");return undefined;break;}}
else if(ta=="spmatrix"){switch(tb){case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addMatrixspMatrix(b,a);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addspMatrices(a,b);break;case "vector":case "spvector":default:error("Error in add(A,b): a is a sparse matrix and B is a "+tb+".");return undefined;break;}}
else if(ta=="ComplexVector"){switch(tb){case "vector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addComplexVectorVector(a,b);break;case "spvector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addComplexVectorspVector(a,b);break;case "ComplexVector":if(a.length!=b.length){error("Error in add(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return addComplexVectors(b,a);break;case "matrix":case "spmatrix":default:error("Error in add(a,B): a is a vector and B is a "+tb+".");return undefined;break;}}
else if(ta=="ComplexMatrix"){switch(tb){case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addComplexMatrixMatrix(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addComplexMatrixspMatrix(a,b);break;case "ComplexMatrix":if(a.m!=b.m||a.n!=b.n){error("Error in add(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return addComplexMatrices(a,b);break;case "vector":case "spvector":default:error("Error in add(A,b): a is a matrix and B is a "+tb+".");return undefined;break;}}
else
return undefined;}
function subScalarVector(scalar,vec){const n=vec.length;var res=new Float64Array(n);for(var i=0;i<n;i++)
res[i]=scalar-vec[i];return res;}
function subVectorScalar(vec,scalar){const n=vec.length;var res=new Float64Array(vec);for(var i=0;i<n;i++)
res[i]-=scalar;return res;}
function subScalarMatrix(a,B){return new Matrix(B.m,B.n,subScalarVector(a,B.val),true);}
function subMatrixScalar(B,a){return new Matrix(B.m,B.n,subVectorScalar(B.val,a),true);}
function subVectors(a,b){const n=a.length;var c=new Float64Array(a);for(var i=0;i<n;i++)
c[i]-=b[i];return c;}
function subMatrices(A,B){return new Matrix(A.m,A.n,subVectors(A.val,B.val),true);}
function sub(a,b){const ta=type(a);const tb=type(b);if(ta=="number"&&tb=="number")
return a-b;else if(ta=="number"){switch(tb){case "Complex":return addComplexReal(minusComplex(b),a);break;case "vector":return subScalarVector(a,b);break;case "matrix":return subScalarMatrix(a,b);break;case "spvector":return subScalarspVector(a,b);break;case "spmatrix":return subScalarspMatrix(a,b);break;default:return undefined;break;}}
else if(tb=="number"){switch(ta){case "Complex":return addComplexReal(b,-a);break;case "vector":return subVectorScalar(a,b);break;case "matrix":return subMatrixScalar(a,b);break;case "spvector":return addScalarspVector(-b,a);break;case "spmatrix":return addScalarspMatrix(-b,a);break;default:return undefined;break;}}
else if(ta=="vector"){switch(tb){case "vector":if(a.length!=b.length){error("Error in sub(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return subVectors(a,b);break;case "spvector":if(a.length!=b.length){error("Error in sub(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return subVectorspVector(a,b);break;case "matrix":case "spmatrix":default:error("Error in sub(a,B): a is a vector and B is a "+tb+".");return undefined;break;}}
else if(ta=="matrix"){switch(tb){case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in sub(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return subMatrices(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in sub(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return subMatrixspMatrix(a,b);break;case "vector":case "spvector":default:error("Error in sub(A,b): A is a matrix and b is a "+tb+".");return undefined;break;}}
else if(ta=="spvector"){switch(tb){case "vector":if(a.length!=b.length){error("Error in sub(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return subspVectorVector(a,b);break;case "spvector":if(a.length!=b.length){error("Error in sub(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
return subspVectors(a,b);break;case "matrix":case "spmatrix":default:error("Error in sub(a,B): a is a sparse vector and B is a "+tb+".");return undefined;break;}}
else if(ta=="spmatrix"){switch(tb){case "matrix":if(a.m!=b.m||a.n!=b.n){error("Error in sub(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return subspMatrixMatrix(a,b);break;case "spmatrix":if(a.m!=b.m||a.n!=b.n){error("Error in sub(A,B): size(A) = ["+a.m+","+a.n+"] != ["+b.m+","+b.n+"] = size(B).");return undefined;}
return subspMatrices(a,b);break;case "vector":case "spvector":default:error("Error in sub(A,b): a is a sparse matrix and B is a "+tb+".");return undefined;break;}}
else
return undefined;}
function pow(a,b){var i;const ta=type(a);const tb=type(b);if(ta=="number"&&tb=="number")
return Math.pow(a,b);else if(ta=="number"){if(tb=="vector"){var c=zeros(b.length);if(!isZero(a)){for(i=0;i<b.length;i++){c[i]=Math.pow(a,b[i]);}}
return c;}
else{var c=new Matrix(b.m,b.n,pow(a,b.val),true);return c;}}
else if(tb=="number"){if(ta=="vector"){var c=zeros(a.length);for(i=0;i<a.length;i++)
c[i]=Math.pow(a[i],b);return c;}
else{var c=new Matrix(a.m,a.n,pow(a.val,b),true);return c;}}
else if(ta=="vector"){if(tb=="vector"){if(a.length!=b.length){error("Error in pow(a,b): a.length = "+a.length+" != "+b.length+" = b.length.");return undefined;}
var c=zeros(a.length);for(i=0;i<a.length;i++){c[i]=Math.pow(a[i],b[i]);}
return c;}
else{return "undefined";}}
else{if(tb=="vector"){return "undefined";}
else{var c=new Matrix(a.m,a.n,pow(a.val,b.val),true);return c;}}}
function minus(x){switch(type(x)){case "number":return-x;break;case "vector":return minusVector(x);break;case "spvector":return new spVector(x.length,minusVector(x.val),x.ind);break;case "ComplexVector":return minusComplexVector(x);break;case "matrix":return new Matrix(x.m,x.n,minusVector(x.val),true);break;case "spmatrix":return new spMatrix(x.m,x.n,minusVector(x.val),x.cols,x.rows);break;case "ComplexMatrix":return minusComplexMatrix(x);break;default:return undefined;}}
function minusVector(x){var res=new Float64Array(x.length);for(var i=0;i<x.length;i++)
res[i]=-x[i];return res;}
function minusMatrix(x){return new Matrix(x.m,x.n,minusVector(x.val),true);}
function minVector(a){const n=a.length;var res=a[0];for(var i=1;i<n;i++){if(a[i]<res)
res=a[i];}
return res;}
function minMatrix(A){return minVector(A.val);}
function minVectorScalar(vec,scalar){var n=vec.length;var res=new Float64Array(vec);for(var i=0;i<n;i++){if(scalar<vec[i])
res[i]=scalar;}
return res;}
function minMatrixScalar(A,scalar){return new Matrix(A.m,A.n,minVectorScalar(A.val,scalar),true);}
function minMatrixRows(A){const m=A.m;const n=A.n;var res=new Float64Array(A.val.subarray(0,n));var j;var r=n;for(var i=1;i<m;i++){for(j=0;j<n;j++)
if(A.val[r+j]<res[j])
res[j]=A.val[r+j];r+=n;}
return new Matrix(1,n,res,true);}
function minMatrixCols(A){var m=A.m;var res=new Float64Array(m);var r=0;for(var i=0;i<m;i++){res[i]=minVector(A.val.subarray(r,r+A.n));r+=A.n;}
return res;}
function minVectorVector(a,b){const n=a.length;var res=new Float64Array(a);for(var i=0;i<n;i++){if(b[i]<a[i])
res[i]=b[i];}
return res;}
function minMatrixMatrix(A,B){return new Matrix(A.m,A.n,minVectorVector(A.val,B.val),true);}
function min(a,b){var ta=type(a);if(arguments.length==1){switch(ta){case "vector":return minVector(a);break;case "spvector":var m=minVector(a.val);if(m>0&&a.val.length<a.length)
return 0;else
return m;break;case "matrix":return minMatrix(a);break;case "spmatrix":var m=minVector(a.val);if(m>0&&a.val.length<a.m*a.n)
return 0;else
return m;break;default:return a;break;}}
var tb=type(b);if(ta=="spvector"){a=fullVector(a);ta="vector";}
if(ta=="spmatrix"){a=fullMatrix(a);ta="matrix";}
if(tb=="spvector"){b=fullVector(b);tb="vector";}
if(tb=="spmatrix"){b=fullMatrix(b);tb="matrix";}
if(ta=="number"&&tb=="number")
return Math.min(a,b);else if(ta=="number"){if(tb=="vector")
return minVectorScalar(b,a);else
return minMatrixScalar(b,a);}
else if(tb=="number"){if(ta=="vector")
return minVectorScalar(a,b);else{if(b==1)
return minMatrixRows(a);else if(b==2)
return minMatrixCols(a);else
return minMatrixScalar(a,b);}}
else if(ta=="vector"){if(tb=="vector")
return minVectorVector(a,b);else
return "undefined";}
else{if(tb=="matrix")
return minMatrixMatrix(a,b);else
return "undefined";}}
function maxVector(a){const n=a.length;var res=a[0];for(var i=1;i<n;i++){if(a[i]>res)
res=a[i];}
return res;}
function maxMatrix(A){return maxVector(A.val);}
function maxVectorScalar(vec,scalar){const n=vec.length;var res=new Float64Array(vec);for(var i=0;i<n;i++){if(scalar>vec[i])
res[i]=scalar;}
return res;}
function maxMatrixScalar(A,scalar){return maxVectorScalar(A.val,scalar);}
function maxMatrixRows(A){const m=A.m;const n=A.n;var res=new Float64Array(A.val.subarray(0,n));var j;var r=n;for(var i=1;i<m;i++){for(j=0;j<n;j++)
if(A.val[r+j]>res[j])
res[j]=A.val[r+j];r+=n;}
return new Matrix(1,n,res,true);}
function maxMatrixCols(A){const m=A.m;var res=new Float64Array(m);var r=0;for(var i=0;i<m;i++){res[i]=maxVector(A.val.subarray(r,r+A.n));r+=A.n;}
return res;}
function maxVectorVector(a,b){var n=a.length;var res=new Float64Array(a);for(var i=0;i<n;i++){if(b[i]>a[i])
res[i]=b[i];}
return res;}
function maxMatrixMatrix(A,B){return new Matrix(A.m,A.n,maxVectorVector(A.val,B.val),true);}
function max(a,b){var ta=type(a);if(arguments.length==1){switch(ta){case "vector":return maxVector(a);break;case "spvector":var m=maxVector(a.val);if(m<0&&a.val.length<a.length)
return 0;else
return m;break;case "matrix":return maxMatrix(a);break;case "spmatrix":var m=maxVector(a.val);if(m<0&&a.val.length<a.m*a.n)
return 0;else
return m;break;default:return a;break;}}
var tb=type(b);if(ta=="spvector"){a=fullVector(a);ta="vector";}
if(ta=="spmatrix"){a=fullMatrix(a);ta="matrix";}
if(tb=="spvector"){b=fullVector(b);tb="vector";}
if(tb=="spmatrix"){b=fullMatrix(b);tb="matrix";}
if(ta=="number"&&tb=="number")
return Math.max(a,b);else if(ta=="number"){if(tb=="vector")
return maxVectorScalar(b,a);else
return maxMatrixScalar(b,a);}
else if(tb=="number"){if(ta=="vector")
return maxVectorScalar(a,b);else{if(b==1)
return maxMatrixRows(a);else if(b==2)
return maxMatrixCols(a);else
return maxMatrixScalar(a,b);}}
else if(ta=="vector"){if(tb=="vector")
return maxVectorVector(a,b);else
return "undefined";}
else{if(tb=="matrix")
return maxMatrixMatrix(a,b);else
return "undefined";}}
function transposeMatrix(A){var i;var j;const m=A.m;const n=A.n;if(m>1){var res=zeros(n,m);var Aj=0;for(j=0;j<m;j++){var ri=0;for(i=0;i<n;i++){res.val[ri+j]=A.val[Aj+i];ri+=m;}
Aj+=n;}
return res;}
else{return A.val;}}
function transposeVector(a){return new Matrix(1,a.length,a);}
function transpose(A){var i;var j;switch(type(A)){case "number":return A;break;case "vector":var res=new Matrix(1,A.length,A);return res;break;case "spvector":return transposespVector(A);break;case "ComplexVector":var res=new ComplexMatrix(1,A.length,conj(A));return res;break;case "matrix":return transposeMatrix(A);break;case "spmatrix":return transposespMatrix(A);break;case "ComplexMatrix":return transposeComplexMatrix(A);break;default:return undefined;break;}}
function det(A){const n=A.n;if(A.m!=n||typeof(A.m)=="undefined")
return undefined;if(n==2){return A.val[0]*A.val[3]-A.val[1]*A.val[2];}
else{var detA=0;var i,j;for(i=0;i<n;i++){var proddiag=1;for(j=0;j<n;j++)
proddiag*=A.val[((i+j)%n)*n+j];detA+=proddiag;}
for(i=0;i<n;i++){var proddiag=1;for(j=0;j<n;j++)
proddiag*=A.val[((i+n-1-j)%n)*n+j];detA-=proddiag;}}
return detA;}
function trace(A){if(type(A)=="matrix"){var n=A.length;if(A.m!=n)
return "undefined";var res=0;for(var i=0;i<n;i++)
res+=A.val[i*n+i];return res;}
else{return undefined;}}
function triu(A){var i;var j;const n=A.n;const m=A.m;var res=zeros(m,n);var im=m;if(n<m)
im=n;var r=0;for(i=0;i<im;i++){for(j=i;j<n;j++)
res.val[r+j]=A.val[r+j];r+=n;}
return res;}
function tril(A){var i;var j;const n=A.n;const m=A.m;var res=zeros(m,n);var im=m;if(n<m)
im=n;var r=0;for(i=0;i<im;i++){for(j=0;j<=i;j++)
res.val[r+j]=A.val[r+j];r+=n;}
if(m>im){for(i=im;i<m;i++){for(j=0;j<n;j++)
res.val[r+j]=A.val[r+j];r+=n;}}
return res;}
function issymmetric(A){const m=A.m;const n=A.n;if(m!=n)
return false;for(var i=0;i<m;i++)
for(var j=0;j<n;j++)
if(A.val[i*n+j]!=A.val[j*n+i])
return false;return true;}
function mat(elems,rowwise){var k;var concatWithNumbers=false;var elemtypes=new Array(elems.length);for(k=0;k<elems.length;k++){elemtypes[k]=type(elems[k]);if(elemtypes[k]=="number")
concatWithNumbers=true;}
if(typeof(rowwise)=="undefined"){if(type(elems)=="vector")
return new Float64Array(elems);var rowwise=true;for(k=0;k<elems.length;k++){if(!Array.isArray(elems[k])||elemtypes[k]=="vector"){rowwise=false;if(elemtypes[k]=="string")
return elems;}}}
if(elems.length==0){return[];}
var m=0;var n=0;var i;var j;if(rowwise){var res=new Array();for(k=0;k<elems.length;k++){switch(elemtypes[k]){case "matrix":res.push(elems[k].val);m+=elems[k].m;n=elems[k].n;break;case "vector":if(concatWithNumbers){for(var l=0;l<elems[k].length;l++)
res.push(elems[k][l]);n=1;m+=elems[k].length;}
else{res.push(elems[k]);m+=1;n=elems[k].length;}
break;case "number":res.push(elems[k]);m+=1;n=1;break;case "spvector":return spmat(elems);default:return elems;break;}}
if(n==1){var M=new Float64Array(res);return M;}
var M=new Matrix(m,n);var p=0;for(k=0;k<res.length;k++){if(res[k].buffer){M.val.set(res[k],p);p+=res[k].length;}
else{for(j=0;j<res[k].length;j++)
M.val[p+j]=res[k][j];p+=res[k].length;}}
return M;}
else{m=size(elems[0],1);for(k=0;k<elems.length;k++){if(elemtypes[k]=="matrix")
n+=elems[k].n;else
n++;if(size(elems[k],1)!=m)
return "undefined";}
var res=new Matrix(m,n);var c;for(i=0;i<m;i++){c=0;for(k=0;k<elems.length;k++){switch(elemtypes[k]){case "matrix":for(j=0;j<elems[k].n;j++){res.val[i*n+j+c]=elems[k].val[i*elems[k].n+j];}
c+=elems[k].n;break;case "vector":res.val[i*n+c]=elems[k][i];c++;break;case "number":res.val[i*n+c]=elems[k];c++;break;default:break;}}}
return res;}}
function isEqual(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isEqual(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(isZero(a[i]-b))
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isEqual(a.val,b),true);return res;break;default:return(a==b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(isZero(a-b)?1:0);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(isZero(a[i]-b[i]))
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isEqual(a.val,b.val),true);return res;break;default:return(a==b?1:0);}}
else
return "undefined";}
function isNotEqual(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isNotEqual(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(!isZero(a[i]-b))
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isNotEqual(a.val,b),true);return res;break;default:return(a!=b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(!isZero(a-b)?1:0);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(!isZero(get(a,i)-get(b,i)))
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isNotEqual(a.val,b.val),true);return res;break;default:return(a!=b?1:0);}}
else
return "undefined";}
function isGreater(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isGreater(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(a[i]-b>EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isGreater(a.val,b),true);return res;break;default:return(a>b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(a>b?1:0);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(a[i]-b[i]>EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isGreater(a.val,b.val),true);return res;break;default:return(a>b?1:0);}}
else
return "undefined";}
function isGreaterOrEqual(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isGreaterOrEqual(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(a[i]-b>-EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isGreaterOrEqual(a.val,b),true);return res;break;default:return(a>=b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(a>=b);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(a[i]-b[i]>-EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isGreaterOrEqual(a.val,b.val),true);return res;break;default:return(a>=b?1:0);}}
else
return "undefined";}
function isLower(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isLower(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(b-a[i]>EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isLower(a.val,b),true);return res;break;default:return(a<b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(a<b?1:0);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(b[i]-a[i]>EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isLower(a.val,b.val),true);return res;break;default:return(a<b?1:0);}}
else
return "undefined";}
function isLowerOrEqual(a,b){var i;var j;var res;var ta=type(a);var tb=type(b);if(ta=="number"&&tb!="number")
return isLowerOrEqual(b,a);if(ta!="number"&&tb=="number"){switch(ta){case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(b-a[i]>-EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isLowerOrEqual(a.val,b),true);return res;break;default:return(a<=b?1:0);}}
else if(ta==tb){switch(ta){case "number":return(a<=b?1:0);break;case "vector":res=new Float64Array(a.length);for(i=0;i<a.length;i++){if(b[i]-a[i]>-EPS)
res[i]=1;}
return res;break;case "matrix":res=new Matrix(a.m,a.n,isLowerOrEqual(a.val,b.val),true);return res;break;default:return(a<=b?1:0);}}
else
return "undefined";}
function find(b){var i;var n=b.length;var res=new Array();for(i=0;i<n;i++){if(b[i]!=0)
res.push(i);}
return res;}
argmax=findmax;function findmax(x){var i;switch(type(x)){case "number":return 0;break;case "vector":var idx=0;var maxi=x[0];for(i=1;i<x.length;i++){if(x[i]>maxi){maxi=x[i];idx=i;}}
return idx;break;case "spvector":var maxi=x.val[0];var idx=x.ind[0];for(i=1;i<x.val.length;i++){if(x.val[i]>maxi){maxi=x.val[i];idx=x.ind[i];}}
if(maxi<0&&x.val.length<x.length){idx=0;while(x.ind.indexOf(idx)>=0&&idx<x.length)
idx++;}
return idx;break;default:return "undefined";}}
argmin=findmin;function findmin(x){var i;switch(type(x)){case "number":return 0;break;case "vector":var idx=0;var mini=x[0];for(i=1;i<x.length;i++){if(x[i]<mini){mini=x[i];idx=i;}}
return idx;break;case "spvector":var mini=x.val[0];var idx=x.ind[0];for(i=1;i<x.val.length;i++){if(x.val[i]<mini){mini=x.val[i];idx=x.ind[i];}}
if(mini>0&&x.val.length<x.length){idx=0;while(x.ind.indexOf(idx)>=0&&idx<x.length)
idx++;}
return idx;break;default:return "undefined";}}
function sort(x,decreasingOrder,returnIndexes){if(typeof(decreasingOrder)=="undefined")
var decreasingOrder=false;if(typeof(returnIndexes)=="undefined")
var returnIndexes=false;var i;var j;var tmp;const n=x.length;if(returnIndexes){var indexes=range(n);for(i=0;i<n-1;i++){if(decreasingOrder)
j=findmax(get(x,range(i,n)))+i;else
j=findmin(get(x,range(i,n)))+i;if(i!=j){tmp=x[i];x[i]=x[j];x[j]=tmp;tmp=indexes[i];indexes[i]=indexes[j];indexes[j]=tmp;}}
return indexes;}
else{var xs=vectorCopy(x);for(i=0;i<n-1;i++){if(decreasingOrder)
j=findmax(get(xs,range(i,n)))+i;else
j=findmin(get(xs,range(i,n)))+i;if(i!=j){tmp=xs[i];xs[i]=xs[j];xs[j]=tmp;}}
return xs;}}
function sumVector(a){var i;const n=a.length;var res=a[0];for(i=1;i<n;i++)
res+=a[i];return res;}
function sumMatrix(A){return sumVector(A.val);}
function sumMatrixRows(A){var i;var j;const m=A.m;const n=A.n;var res=new Float64Array(n);var r=0;for(i=0;i<m;i++){for(j=0;j<n;j++)
res[j]+=A.val[r+j];r+=n;}
return new Matrix(1,n,res,true);}
function sumMatrixCols(A){const m=A.m;var res=new Float64Array(m);var r=0;for(var i=0;i<m;i++){for(var j=0;j<A.n;j++)
res[i]+=A.val[r+j];r+=A.n;}
return res;}
function sum(A,sumalongdimension){switch(type(A)){case "vector":if(arguments.length==1||sumalongdimension==1){return sumVector(A);}
else{return vectorCopy(A);}
break;case "spvector":if(arguments.length==1||sumalongdimension==1)
return sumVector(A.val);else
return A.copy();break;case "matrix":if(arguments.length==1){return sumMatrix(A);}
else if(sumalongdimension==1){return sumMatrixRows(A);}
else if(sumalongdimension==2){return sumMatrixCols(A);}
else
return undefined;break;case "spmatrix":if(arguments.length==1){return sumVector(A.val);}
else if(sumalongdimension==1){return sumspMatrixRows(A);}
else if(sumalongdimension==2){return sumspMatrixCols(A);}
else
return undefined;break;default:return A;break;}}
function prodVector(a){var i;const n=a.length;var res=a[0];for(i=1;i<n;i++)
res*=a[i];return res;}
function prodMatrix(A){return prodVector(A.val);}
function prodMatrixRows(A){var i;var j;const m=A.m;const n=A.n;var res=new Float64Array(A.row(0));var r=n;for(i=1;i<m;i++){for(j=0;j<n;j++)
res[j]*=A.val[r+j];r+=A.n;}
return new Matrix(1,n,res,true);}
function prodMatrixCols(A){const m=A.m;var res=new Float64Array(m);var r=0;for(var i=0;i<m;i++){res[i]=A.val[r];for(var j=1;j<A.n;j++)
res[i]*=A.val[r+j];r+=A.n;}
return res;}
function prod(A,prodalongdimension){switch(type(A)){case "vector":if(arguments.length==1||prodalongdimension==1)
return prodVector(A);else
return vectorCopy(A);break;case "spvector":if(arguments.length==1||prodalongdimension==1){if(A.val.length<A.length)
return 0;else
return prodVector(A.val);}
else
return A.copy();break;case "matrix":if(arguments.length==1){return prodMatrix(A);}
else if(prodalongdimension==1){return prodMatrixRows(A);}
else if(prodalongdimension==2){return prodMatrixCols(A);}
else
return undefined;break;case "spmatrix":if(arguments.length==1){if(A.val.length<A.m*A.n)
return 0;else
return prodVector(A.val);}
else if(prodalongdimension==1){return prodspMatrixRows(A);}
else if(prodalongdimension==2){return prodspMatrixCols(A);}
else
return undefined;break;default:return A;break;}}
function mean(A,sumalongdimension){switch(type(A)){case "vector":if(arguments.length==1||sumalongdimension==1){return sumVector(A)/A.length;}
else{return vectorCopy(A);}
break;case "spvector":if(arguments.length==1||sumalongdimension==1)
return sumVector(A.val)/A.length;else
return A.copy();break;case "matrix":if(arguments.length==1){return sumMatrix(A)/(A.m*A.n);}
else if(sumalongdimension==1){return mulScalarMatrix(1/A.m,sumMatrixRows(A));}
else if(sumalongdimension==2){return mulScalarVector(1/A.n,sumMatrixCols(A));}
else
return undefined;break;case "spmatrix":if(arguments.length==1){return sumVector(A.val)/(A.m*A.n);}
else if(sumalongdimension==1){return mulScalarMatrix(1/A.m,sumspMatrixRows(A));}
else if(sumalongdimension==2){return mulScalarVector(1/A.n,sumspMatrixCols(A));}
else
return undefined;break;default:return A;break;}}
function variance(A,alongdimension){if(arguments.length>1)
var meanA=mean(A,alongdimension);else
var meanA=mean(A);switch(type(A)){case "number":return 0;break;case "vector":if(arguments.length==1||alongdimension==1){var res=(dot(A,A)/A.length)-meanA*meanA;return res;}
else{return zeros(A.length);}
break;case "spvector":if(arguments.length==1||alongdimension==1){var res=(dot(A.val,A.val)/A.length)-meanA*meanA;return res;}
else
return zeros(A.length);break;case "matrix":case "spmatrix":if(typeof(alongdimension)=="undefined"){var res=(sum(entrywisemul(A,A))/(A.m*A.n))-meanA*meanA;return res;}
else if(alongdimension==1){var res=sub(entrywisediv(sum(entrywisemul(A,A),1),A.length),entrywisemul(meanA,meanA));return res;}
else if(alongdimension==2){res=sub(entrywisediv(sum(entrywisemul(A,A),2),A.n),entrywisemul(meanA,meanA));return res;}
else
return undefined;break;default:return undefined;}}
function std(A,alongdimension){if(arguments.length>1)
return sqrt(variance(A,alongdimension));else
return sqrt(variance(A));}
function cov(X){switch(type(X)){case "number":return 0;break;case "vector":var mu=mean(X);return(dot(X,X)/X.length-mu*mu);break;case "spvector":var mu=mean(X);return(dot(X.val,X.val)/X.length-mu*mu);break;case "matrix":var mu=mean(X,1).row(0);return divMatrixScalar(xtx(subMatrices(X,outerprod(ones(X.m),mu))),X.m);break;case "spmatrix":var mu=mean(X,1).row(0);return divMatrixScalar(xtx(subspMatrixMatrix(X,outerprod(ones(X.m),mu))),X.m);break;default:return undefined;}}
function xtx(X){const N=X.m;const d=X.n;var C=new Matrix(d,d);for(var i=0;i<N;i++){var xi=X.row(i);for(var k=0;k<d;k++){var xik=xi[k];for(var j=k;j<d;j++){C.val[k*d+j]+=xik*xi[j];}}}
for(var k=0;k<d;k++){var kd=k*d;for(var j=k;j<d;j++)
C.val[j*d+k]=C.val[kd+j];}
return C;}
function norm(A,sumalongdimension){var i;var j;switch(type(A)){case "number":return Math.abs(A);break;case "vector":if(arguments.length==1||sumalongdimension==1){return Math.sqrt(dot(A,A));}
else
return abs(A);break;case "spvector":if(arguments.length==1||sumalongdimension==1){return Math.sqrt(dot(A.val,A.val));}
else
return abs(A);break;case "matrix":if(arguments.length==1){return Math.sqrt(dot(A.val,A.val));}
else if(sumalongdimension==1){const n=A.n;var res=zeros(1,n);var r=0;for(i=0;i<A.m;i++){for(j=0;j<n;j++)
res.val[j]+=A.val[r+j]*A.val[r+j];r+=n;}
for(j=0;j<n;j++)
res.val[j]=Math.sqrt(res.val[j]);return res;}
else if(sumalongdimension==2){var res=zeros(A.m);var r=0;for(i=0;i<A.m;i++){for(j=0;j<A.n;j++)
res[i]+=A.val[r+j]*A.val[r+j];r+=A.n;res[i]=Math.sqrt(res[i]);}
return res;}
else
return "undefined";break;case "spmatrix":if(arguments.length==1){return Math.sqrt(dot(A.val,A.val));}
else if(sumalongdimension==1&&!A.rowmajor){const nn=A.n;var res=zeros(1,nn);for(j=0;j<nn;j++){var s=A.cols[j];var e=A.cols[j+1];for(var k=s;k<e;k++)
res.val[j]+=A.val[k]*A.val[k];res.val[j]=Math.sqrt(res.val[j]);}
return res;}
else if(sumalongdimension==2&&A.rowmajor){var res=zeros(A.m);for(i=0;i<A.m;i++){var s=A.rows[i];var e=A.rows[i+1];for(var k=s;k<e;k++)
res[i]+=A.val[k]*A.val[k];res[i]=Math.sqrt(res[i]);}
return res;}
else
return "undefined";break;default:return "undefined";}}
function norm1(A,sumalongdimension){if(arguments.length==1)
return sum(abs(A));else
return sum(abs(A),sumalongdimension);}
function norminf(A,sumalongdimension){if(arguments.length==1)
return max(abs(A));else
return max(abs(A),sumalongdimension);}
function normp(A,p,sumalongdimension){if(arguments.length==2)
return Math.pow(sum(pow(abs(A),p)),1/p);else
return pow(sum(pow(abs(A),p),sumalongdimension),1/p);}
function normnuc(A){switch(type(A)){case "matrix":return sumVector(svd(A));break;case "spmatrix":return sumVector(svd(fullMatrix(A)));break;case "number":return A;break;case "vector":case "spvector":return 1;break;default:return undefined;break;}}
function norm0(A,sumalongdimension,epsilonarg){var epsilon=EPS;if(arguments.length==3)
epsilon=epsilonarg;var i;var j;switch(type(A)){case "number":return(Math.abs(A)>epsilon);break;case "vector":if(arguments.length==1||sumalongdimension==1){return norm0Vector(A,epsilon);}
else
return isGreater(abs(a),epsilon);break;case "spvector":if(arguments.length==1||sumalongdimension==1){return norm0Vector(A.val,epsilon);}
else
return isGreater(abs(a),epsilon);break;case "matrix":if(arguments.length==1){return norm0Vector(A.val,epsilon);}
else if(sumalongdimension==1){var res=zeros(1,A.n);for(i=0;i<A.m;i++){for(j=0;j<A.n;j++)
if(Math.abs(A[i*A.n+j])>epsilon)
res.val[j]++;}
return res;}
else if(sumalongdimension==2){var res=zeros(A.m);for(i=0;i<A.m;i++){for(j=0;j<A.n;j++)
if(Math.abs(A[i*A.n+j])>epsilon)
res[i]++;}
return res;}
else
return undefined;break;case "spmatrix":if(arguments.length==1){return norm0Vector(A.val,epsilon);}
else if(sumalongdimension==1){var res=zeros(1,A.n);if(A.rowmajor){for(var k=0;k<A.val.length;k++)
if(Math.abs(A.val[k])>epsilon)
res.val[A.cols[k]]++;}
else{for(var i=0;i<A.n;i++)
res.val[i]=norm0Vector(A.col(i).val,epsilon);}
return res;}
else if(sumalongdimension==2){var res=zeros(A.m);if(A.rowmajor){for(var i=0;i<A.m;i++)
res[i]=norm0Vector(A.row(i).val,epsilon);}
else{for(var k=0;k<A.val.length;k++)
if(Math.abs(A.val[k])>epsilon)
res[A.rows[k]]++;}
return res;}
else
return undefined;break;default:return undefined;}}
function norm0Vector(x,epsilon){const n=x.length;var res=0;for(var i=0;i<n;i++)
if(Math.abs(x[i])>epsilon)
res++;return res;}
function solve(A,b){var tA=type(A);if(tA=="vector"||tA=="spvector"||(tA=="matrix"&&A.m==1)){var AtA=mul(transpose(A),A);var Atb=mul(transpose(A),b);return Atb/AtA;}
if(tA=="spmatrix"){return spcgnr(A,b);}
if(type(b)=="vector"){if(A.m==A.n)
return solveGaussianElimination(A,b);else
return solveWithQRcolumnpivoting(A,b);}
else
return solveWithQRcolumnpivotingMultipleRHS(A,b);}
function cholsolve(L,b){var z=forwardsubstitution(L,b);var x=backsubstitution(transposeMatrix(L),z);return x;}
function solveWithQRfactorization(A,b){const m=A.length;const n=A.n;var QRfact=qr(A);var R=QRfact.R;var beta=QRfact.beta;var btmp=vectorCopy(b);var j;var i;var k;var v;var smallb;for(j=0;j<n-1;j++){v=get(R,range(j,m),j);v[0]=1;smallb=get(btmp,range(j,m));set(btmp,range(j,m),sub(smallb,mul(beta[j]*mul(v,smallb),v)));}
if(m>n){j=n-1;v=get(R,range(j,m),j);v[0]=1;smallb=get(btmp,range(j,m));set(btmp,range(j,m),sub(smallb,mul(beta[j]*mul(v,smallb),v)));}
return backsubstitution(R,get(btmp,range(n)));}
function backsubstitution(U,b){const n=b.length;var j=n-1;var x=zeros(n);if(!isZero(U.val[j*n+j]))
x[j]=b[j]/U.val[j*n+j];j=n-2;if(!isZero(U.val[j*n+j]))
x[j]=(b[j]-U.val[j*n+n-1]*x[n-1])/U.val[j*n+j];for(j=n-3;j>=0;j--){if(!isZero(U.val[j*n+j]))
x[j]=(b[j]-dot(U.row(j).subarray(j+1,n),x.subarray(j+1,n)))/U.val[j*n+j];}
return x;}
function forwardsubstitution(L,b){const n=b.length;var j;var x=zeros(n);if(!isZero(L.val[0]))
x[0]=b[0]/L.val[0];if(!isZero(L.val[n+1]))
x[1]=(b[1]-L.val[n]*x[0])/L.val[n+1];for(j=2;j<n;j++){if(!isZero(L.val[j*n+j]))
x[j]=(b[j]-dot(L.row(j).subarray(0,j),x.subarray(0,j)))/L.val[j*n+j];}
return x;}
function solveWithQRcolumnpivoting(A,b){var m;var n;var R;var V;var beta;var r;var piv;if(type(A)=="matrix"){m=A.m;n=A.n;var QRfact=qr(A);R=QRfact.R;V=QRfact.V;beta=QRfact.beta;r=QRfact.rank;piv=QRfact.piv;}
else{R=A.R;r=A.rank;V=A.V;beta=A.beta;piv=A.piv;m=R.m;n=R.n;}
var btmp=vectorCopy(b);var j;var i;var k;var smallb;for(j=0;j<r;j++){smallb=get(btmp,range(j,m));set(btmp,range(j,m),sub(smallb,mul(beta[j]*mul(V[j],smallb),V[j])));}
var x=zeros(n);if(r>1){set(x,range(0,r),backsubstitution(R,get(btmp,range(r))));}
else{x[0]=btmp[0]/R.val[0];}
for(j=r-1;j>=0;j--){if(piv[j]!=j){var tmp=x[j];x[j]=x[piv[j]];x[piv[j]]=tmp;}}
return x;}
function solveWithQRcolumnpivotingMultipleRHS(A,B){var m;var n;var R;var V;var beta;var r;var piv;if(type(A)=="matrix"){m=A.m;n=A.n;var QRfact=qr(A);R=QRfact.R;V=QRfact.V;beta=QRfact.beta;r=QRfact.rank;piv=QRfact.piv;}
else{R=A.R;r=A.rank;V=A.V;beta=A.beta;piv=A.piv;m=R.m;n=R.n;}
var btmp=matrixCopy(B);var j;var i;var k;var smallb;for(j=0;j<r;j++){smallb=get(btmp,range(j,m),[]);set(btmp,range(j,m),[],sub(smallb,mul(mul(beta[j],V[j]),mul(transpose(V[j]),smallb))));}
var X=zeros(n,m);if(r>1){for(j=0;j<m;j++)
set(X,range(0,r),j,backsubstitution(R,get(btmp,range(r),j)));}
else{set(X,0,[],entrywisediv(get(btmp,0,[]),R.val[0]));}
for(j=r-1;j>=0;j--){if(piv[j]!=j){swaprows(X,j,piv[j]);}}
return X;}
function solveGaussianElimination(Aorig,borig){var i;var j;var k;var A=matrixCopy(Aorig).toArrayOfFloat64Array();var b=vectorCopy(borig);const m=Aorig.m;const n=Aorig.n;if(m!=n)
return undefined;for(k=0;k<m;k++){var imax=k;var Aimaxk=Math.abs(A[imax][k]);for(i=k+1;i<m;i++){var Aik=Math.abs(A[i][k]);if(Aik>Aimaxk){imax=i;Aimaxk=Aik;}}
if(isZero(Aimaxk)){console.log("** Warning in solve(A,b), A is square but singular, switching from Gaussian elimination to QR method.");return solveWithQRcolumnpivoting(Aorig,borig);}
if(imax!=k){var a=A[k];A[k]=A[imax];A[imax]=a;var tmpb=b[k];b[k]=b[imax];b[imax]=tmpb;}
var Ak=A[k];var Akk=Ak[k];b[k]/=Akk;for(j=k+1;j<n;j++)
Ak[j]/=Akk;if(Math.abs(Akk)<1e-8){console.log("** Warning in solveGaussianElimination: "+Akk+" "+k+":"+m);}
var Aik;var bk=b[k];for(i=0;i<m;i++){if(i!=k){var Ai=A[i];Aik=Ai[k];for(j=k+1;j<n;j++){Ai[j]-=Aik*Ak[j];}
b[i]-=Aik*bk;}}}
return b;}
function inv(M){if(typeof(M)=="number")
return 1/M;var i;var j;var k;const m=M.length;const n=M.n;if(m!=n)
return "undefined";var A=matrixCopy(M);var B=eye(n);for(k=0;k<m;k++){var kn=k*n;var imax=k;var Aimaxk=Math.abs(A.val[imax*n+k]);for(i=k+1;i<m;i++){if(Math.abs(A.val[i*n+k])>Aimaxk){imax=i;Aimaxk=Math.abs(A.val[i*n+k]);}}
if(Math.abs(Aimaxk)<1e-12){return "singular";}
if(imax!=k){swaprows(A,k,imax);swaprows(B,k,imax);}
var Akk=A.val[kn+k];for(j=0;j<n;j++){A.val[kn+j]/=Akk;B.val[kn+j]/=Akk;}
if(Math.abs(Akk)<1e-8)
console.log("!! Warning in inv(): "+Akk+" "+k+":"+m);var Aik;for(i=0;i<m;i++){if(i!=k){var ri=i*n;Aik=A.val[ri+k];if(!isZero(Aik)){for(j=0;j<n;j++){A.val[ri+j]-=Aik*A.val[kn+j];B.val[ri+j]-=Aik*B.val[kn+j];}}}}}
return B;}
function chol(A){const n=A.m;if(A.n!=n){error("Cannot compute the cholesky factorization: the matrix is not square.");return undefined;}
const n2=n*n;const Aval=A.val;var L=new Float64Array(n2);var i,j;var sqrtLjj=Math.sqrt(Aval[0]);for(i=0;i<n2;i+=n){L[i]=Aval[i]/sqrtLjj;}
j=1;var jn=n;while(j<n&&!isNaN(sqrtLjj)){for(i=jn;i<n2;i+=n){var Lij=Aval[i+j];for(var k=0;k<j;k++){Lij-=L[jn+k]*L[i+k];}
if(i==jn)
sqrtLjj=Math.sqrt(Lij);L[i+j]=Lij/sqrtLjj;}
j++;jn+=n;}
if(isNaN(sqrtLjj))
return undefined;else
return new Matrix(n,n,L,true);}
function ldlsymmetricpivoting(Aorig){var A=matrixCopy(Aorig);var n=A.length;if(A.m!=n){error("Error in ldl(): the matrix is not square.");return undefined;}
var k;var piv=zeros(n);var alpha;var v;for(k=0;k<n-1;k++){piv[k]=findmax(get(diag(A),range(k,n)));swaprows(A,k,piv[k]);swapcols(A,k,piv[k]);alpha=A.val[k*n+k];v=getCols(A,[k]).subarray(k+1,n);for(var i=k+1;i<n;i++)
A.val[i*n+k]/=alpha;set(A,range(k+1,n),range(k+1,n),sub(get(A,range(k+1,n),range(k+1,n)),outerprod(v,v,1/alpha)));}
for(var j=0;j<n-1;j++){for(var k=j+1;k<n;k++)
A.val[j*n+k]=0;}
return{L:A,piv:piv};}
function house(x){const n=x.length;var i;var mu;var beta;var v=zeros(n);var v0;var sigma;var x0=x[0];var xx=dot(x,x);sigma=xx-x0*x0;if(isZero(sigma)){beta=0;v[0]=1;}
else{mu=Math.sqrt(xx);if(x0<EPS){v0=x0-mu;}
else{v0=-sigma/(x0+mu);}
beta=2*v0*v0/(sigma+v0*v0);v[0]=1;for(i=1;i<n;i++)
v[i]=x[i]/v0;}
return{"v":v,"beta":beta};}
function qroriginal(A,compute_Q){var m=A.length;var n=A.n;if(n>m)
return "QR factorization unavailable for n > m.";var i;var j;var k;var householder;var R=matrixCopy(A);var beta=zeros(n);var outer;var smallR;var Q;var V=new Array();for(j=0;j<n-1;j++){householder=house(get(R,range(j,m),j));smallR=get(R,range(j,m),range(j,n));set(R,range(j,m),range(j,n),subMatrices(smallR,outerprodVectors(householder.v,mulMatrixVector(transposeMatrix(smallR),householder.v),householder.beta)));V[j]=householder.v;beta[j]=householder.beta;}
if(m>n){j=n-1;smallR=get(R,range(j,m),j)
householder=house(smallR);set(R,range(j,m),n-1,subVectors(smallR,mulScalarVector(dot(householder.v,smallR)*householder.beta,householder.v)));V[j]=vectorCopy(householder.v);beta[j]=householder.beta;}
if(compute_Q){var r;if(typeof(compute_Q)=="number"){r=compute_Q;Q=eye(m,r);}
else{Q=eye(m);r=m;}
var smallQ;var nmax=n-1;if(m<=n)
nmax=n-2;if(nmax>=r)
nmax=r-1;for(j=nmax;j>=0;j--){smallQ=get(Q,range(j,m),range(j,r));if(r>1){if(j==r-1)
set(Q,range(j,m),[j],subVectors(smallQ,mulScalarVector(dot(smallQ,V[j])*beta[j],V[j])));else
set(Q,range(j,m),range(j,r),sub(smallQ,outerprod(V[j],mul(transpose(smallQ),V[j]),beta[j])));}
else
Q=subVectors(smallQ,mulScalarVector(dot(smallQ,V[j])*beta[j],V[j]));}}
return{"Q":Q,"R":R,"beta":beta};}
function qr(A,compute_Q){const m=A.m;const n=A.n;var i;var j;var householder;var R=transpose(A);var Q;var V=new Array();var beta=zeros(n);var piv=zeros(n);var smallR;var r=-1;var normA=norm(A);var normR22=normA;var Rij;const TOL=1e-5;var TOLnormR22square=TOL*normA;TOLnormR22square*=TOLnormR22square;var tau=0;var k=0;var c=zeros(n);for(j=0;j<n;j++){var Rj=R.val.subarray(j*R.n,j*R.n+R.n);c[j]=dot(Rj,Rj);if(c[j]>tau){tau=c[j];k=j;}}
var updateR=function(r,v,beta){var i,j,l;var m_r=m-r;for(i=r;i<n;i++){var smallRiv=0;var Ri=i*m+r;var Rval=R.val.subarray(Ri,Ri+m_r);for(l=0;l<m_r;l++)
smallRiv+=Rval[l]*v[l];smallRiv*=beta;for(j=0;j<m_r;j++){Rval[j]-=smallRiv*v[j];}}};var updateC=function(r){var j;for(j=r+1;j<n;j++){var Rjr=R.val[j*m+r];c[j]-=Rjr*Rjr;}
k=r+1;tau=c[r+1];for(j=r+2;j<n;j++){if(c[j]>tau){tau=c[j];k=j;}}};var computeNormR22=function(r){var normR22=0;var i=r+1;var ri=i*m;var j;while(i<n&&normR22<=TOLnormR22square){for(j=r+1;j<m;j++){var Rij=R.val[ri+j];normR22+=Rij*Rij;}
i++;ri+=m;}
return normR22;}
while(tau>EPS&&r<n-1&&normR22>TOLnormR22square){r++;piv[r]=k;swaprows(R,r,k);c[k]=c[r];c[r]=tau;if(r<m-1){householder=house(R.val.subarray(r*R.n+r,r*R.n+m));}
else{householder.v=[1];householder.beta=0;}
if(r<n-1){updateR(r,householder.v,householder.beta);}
else{if(r<m-1){updateR(r,householder.v,householder.beta);}
else{}}
V[r]=vectorCopy(householder.v);beta[r]=householder.beta;if(r<n-1){updateC(r);if(r<m-1)
normR22=computeNormR22(r);else
normR22=0;}}
if(compute_Q){Q=eye(m);var smallQ;var nmax=r;if(m>r+1)
nmax=r-1;for(j=nmax;j>=0;j--){if(j==m-1){Q.val[j*m+j]-=beta[j]*V[j][0]*V[j][0]*Q.val[j*m+j];}
else{var j_to_m=range(j,m);smallQ=get(Q,j_to_m,j_to_m);set(Q,j_to_m,j_to_m,subMatrices(smallQ,outerprodVectors(V[j],mulMatrixVector(transposeMatrix(smallQ),V[j]),beta[j])));}}}
return{"Q":Q,"R":transpose(R),"V":V,"beta":beta,"piv":piv,"rank":r+1};}
function qrRnotTransposed(A,compute_Q){var m=A.m;var n=A.n;var i;var j;var householder;var R=matrixCopy(A);var Q;var V=new Array();var beta=zeros(n);var piv=zeros(n);var smallR;var r=-1;var normA=norm(A);var normR22=normA;var TOL=1e-6;var tau=0;var k=0;var c=zeros(n);for(j=0;j<n;j++){var Aj=getCols(A,[j]);c[j]=dot(Aj,Aj);if(c[j]>tau){tau=c[j];k=j;}}
while(tau>EPS&&r<n-1&&normR22>TOL*normA){r++;piv[r]=k;swapcols(R,r,k);c[k]=c[r];c[r]=tau;if(r<m-1){householder=house(get(R,range(r,m),r));smallR=get(R,range(r,m),range(r,n));}
else{householder.v=[1];householder.beta=0;smallR=R[m-1][m-1];}
if(r<n-1){set(R,range(r,m),range(r,n),subMatrices(smallR,outerprodVectors(householder.v,mulMatrixVector(transposeMatrix(smallR),householder.v),householder.beta)));}
else{set(R,range(r,m),r,sub(smallR,mul(householder.beta*mul(smallR,householder.v),householder.v)));}
if(m>r+1)
V[r]=vectorCopy(householder.v);beta[r]=householder.beta;if(r<n-1){for(j=r+1;j<n;j++){c[j]-=R[r][j]*R[r][j];}
k=r+1;tau=c[r+1];for(j=r+2;j<n;j++){if(c[j]>tau){tau=c[j];k=j;}}
if(r<m-1){normR22=0;for(i=r+1;i<m;i++){for(j=r+1;j<n;j++){Rij=R[i][j];normR22+=Rij*Rij;}}
normR22=Math.sqrt(normR22);}
else
normR22=0;}}
if(compute_Q){Q=eye(m);var smallQ;var nmax=r;if(m>r+1)
nmax=r-1;for(j=nmax;j>=0;j--){if(j==m-1){Q.val[j*m+j]-=beta[j]*V[j][0]*V[j][0]*Q.val[j*m+j];}
else{smallQ=get(Q,range(j,m),range(j,m));set(Q,range(j,m),range(j,m),subMatrices(smallQ,outerprodVectors(V[j],mulMatrixVector(transposeMatrix(smallQ),V[j]),beta[j])));}}}
return{"Q":Q,"R":R,"V":V,"beta":beta,"piv":piv,"rank":r+1};}
function solvecg(A,b){if(A.type=="spmatrix")
return spsolvecg(A,b);else
return solvecgdense(A,b);}
function solvecgdense(A,b){const n=A.n;const m=A.m;var x=randn(n);var r=subVectors(b,mulMatrixVector(A,x));var rhoc=dot(r,r);const TOL=1e-8;var delta2=TOL*norm(b);delta2*=delta2;var p=vectorCopy(r);var w=mulMatrixVector(A,p);var mu=rhoc/dot(p,w);saxpy(mu,p,x);saxpy(-mu,w,r);var rho_=rhoc;rhoc=dot(r,r);var k=1;var updateP=function(tau,r){for(var i=0;i<m;i++)
p[i]=r[i]+tau*p[i];}
while(rhoc>delta2&&k<n){updateP(rhoc/rho_,r);w=mulMatrixVector(A,p);mu=rhoc/dot(p,w);saxpy(mu,p,x);saxpy(-mu,w,r);rho_=rhoc;rhoc=dot(r,r);k++;}
return x;}
function cgnr(A,b){if(A.type=="spmatrix")
return spcgnr(A,b);else
return cgnrdense(A,b);}
function cgnrdense(A,b){const n=A.n;const m=A.m;var x=randn(n);var At=transposeMatrix(A);var r=subVectors(b,mulMatrixVector(A,x));const TOL=1e-8;var delta2=TOL*norm(b);delta2*=delta2;var z=mulMatrixVector(At,r);var rhoc=dot(z,z);var p=vectorCopy(z);var w=mulMatrixVector(A,p);var mu=rhoc/dot(w,w);saxpy(mu,p,x);saxpy(-mu,w,r);z=mulMatrixVector(At,r);var rho_=rhoc;rhoc=dot(z,z);var k=1;var updateP=function(tau,z){for(var i=0;i<m;i++)
p[i]=z[i]+tau*p[i];}
while(rhoc>delta2&&k<n){updateP(rhoc/rho_,z);w=mulMatrixVector(A,p);mu=rhoc/dot(w,w);saxpy(mu,p,x);saxpy(-mu,w,r);z=mulMatrixVector(At,r);rho_=rhoc;rhoc=dot(z,z);k++;}
return x;}
function lanczos(A,q1){const maxIters=300;const TOL=EPS*norm(A);const n=A.n;var i;var k=0;var w=vectorCopy(q1);var v=mulMatrixVector(A,w);var alpha=dot(w,v);saxpy(-alpha,w,v);beta=norm(b);while(beta>TOL&&k<maxIters){for(i=0;i<n;i++){var t=w[i];w[i]=v[i]/beta;v[i]=-beta/t;}
var Aw=mulMatrixVector(A,w);for(i=0;i<n;i++)
v[i]+=Aw[i];alpha=dot(w,v);saxpy(-alpha,w,v);beta=norm(v);k++;}}
function tridiagonalize(A,returnQ){var k;const n=A.length;var T;var Q;var Pk;if(returnQ){T=A;Q=eye(n);var beta=[];var V=[];}
else
T=matrixCopy(A);var p;var w;var vwT;var normTkp1k;var householder;for(k=0;k<n-2;k++){Tkp1k=get(T,range(k+1,n),k);Tkp1kp1=get(T,range(k+1,n),range(k+1,n));householder=house(Tkp1k);p=mulScalarVector(householder.beta,mulMatrixVector(Tkp1kp1,householder.v));w=subVectors(p,mulScalarVector(0.5*householder.beta*dot(p,householder.v),householder.v));normTkp1k=zeros(n-k-1);normTkp1k[0]=norm(Tkp1k);set(T,k,range(k+1,n),normTkp1k);set(T,range(k+1,n),k,normTkp1k);vwT=outerprodVectors(householder.v,w);set(T,range(k+1,n),range(k+1,n),subMatrices(subMatrices(Tkp1kp1,vwT),transpose(vwT)));if(returnQ){V[k]=householder.v;beta[k]=householder.beta;}}
if(returnQ){var updateQ=function(j,v,b){var i,k;var Qtv=zeros(n-j);var n_j=n-j;for(i=0;i<n_j;i++){var Qi=(i+j)*n+j;for(k=0;k<n_j;k++)
Qtv[k]+=v[i]*Q.val[Qi+k];}
for(i=0;i<n_j;i++){var Qi=(i+j)*n+j;var betavk=b*v[i];for(k=0;k<n_j;k++){Q.val[Qi+k]-=betavk*Qtv[k];}}};for(k=n-3;k>=0;k--){updateQ(k+1,V[k],beta[k]);}
return Q;}
else
return T;}
function givens(a,b,Gi,Gk,n){var c;var s;var tau;var G;if(b==0){c=1;s=0;}
else{if(Math.abs(b)>Math.abs(a)){tau=-a/b;s=1/Math.sqrt(1+tau*tau);c=s*tau;}
else{tau=-b/a;c=1/Math.sqrt(1+tau*tau);s=c*tau;}}
if(arguments.length==5){G=eye(n);G.val[Gi*n+Gi]=c;G.val[Gi*n+Gk]=s;G.val[Gk*n+Gi]=-s;G.val[Gk*n+Gk]=c;return G;}
else{return[c,s];}}
function premulGivens(c,s,i,k,A){const n=A.n;var j;const ri=i*n;const rk=k*n;var t1;var t2;for(j=0;j<n;j++){t1=A.val[ri+j];t2=A.val[rk+j];A.val[ri+j]=c*t1-s*t2;A.val[rk+j]=s*t1+c*t2;}}
function postmulGivens(c,s,i,k,A){const m=A.length;var j;var t1;var t2;var rj=0;for(j=0;j<m;j++){t1=A.val[rj+i];t2=A.val[rj+k];A.val[rj+i]=c*t1-s*t2;A.val[rj+k]=s*t1+c*t2;rj+=A.n;}}
function implicitSymQRWilkinsonShift(T,computeZ){const n=T.length;const rn2=n*(n-2);const rn1=n*(n-1);const d=(T.val[rn2+n-2]-T.val[rn1+n-1])/2;const t2=T.val[rn1+n-2]*T.val[rn1+n-2];const mu=T.val[rn1+n-1]-t2/(d+Math.sign(d)*Math.sqrt(d*d+t2));var x=T.val[0]-mu;var z=T.val[n];var cs;if(computeZ)
var csArray=new Array(n-1);var k;for(k=0;k<n-1;k++){cs=givens(x,z);postmulGivens(cs[0],cs[1],k,k+1,T);premulGivens(cs[0],cs[1],k,k+1,T);if(computeZ)
csArray[k]=[cs[0],cs[1]];if(k<n-2){var r=n*(k+1)+k;x=T.val[r];z=T.val[r+n];}}
if(computeZ){return{"T":T,"cs":csArray};}
else
return T;}
function eig(A,computeEigenvectors){var Q;var D;if(computeEigenvectors){D=matrixCopy(A);Q=tridiagonalize(D,true);}
else{D=tridiagonalize(A);}
var q;var p;const n=A.length;var i;const TOL=1e-12;do{for(i=0;i<n-1;i++){if(Math.abs(D.val[i*n+i+1])<TOL*(Math.abs(D.val[i*n+i])+Math.abs(D.val[(i+1)*n+i+1]))){D.val[i*n+i+1]=0;D.val[(i+1)*n+i]=0;}}
if(!isZero(D.val[(n-1)*n+n-2])||!isZero(D.val[(n-2)*n+n-1]))
q=0;else{q=1;while(q<n-1&&isZero(D.val[(n-q-1)*n+n-q-2])&&isZero(D.val[(n-q-2)*n+n-q-1]))
q++;if(q>=n-1)
q=n;}
p=-1;var zerosOnSubdiagonal;do{p++;zerosOnSubdiagonal=false;k=p;while(k<n-q-1&&zerosOnSubdiagonal==false){if(isZero(D.val[(k+1)*n+k]))
zerosOnSubdiagonal=true;k++;}}while(zerosOnSubdiagonal&&p+q<n);if(q<n){if(computeEigenvectors){var res=implicitSymQRWilkinsonShift(get(D,range(p,n-q),range(p,n-q)),true);set(D,range(p,n-q),range(p,n-q),res.T);for(var kk=0;kk<n-q-p-1;kk++)
postmulGivens(res.cs[kk][0],res.cs[kk][1],p+kk,p+kk+1,Q);}
else{set(D,range(p,n-q),range(p,n-q),implicitSymQRWilkinsonShift(get(D,range(p,n-q),range(p,n-q)),false));}}}while(q<n);if(computeEigenvectors){return{"V":diag(D),"U":Q};}
else
return diag(D);}
function eigs(A,r,smallest){if(typeof(r)=="undefined")
var r=1;if(typeof(smallest)=="undefined"||smallest==false||smallest!="smallest"){if(r==1)
return eig_powerIteration(A);else
return eig_orthogonalIteration(A,r);}
else{if(r==1)
return eig_inverseIteration(A,0);else
return eig_bisect(A,r);}}
function eig_powerIteration(A,u0){const maxIters=1000;var k;const n=A.length;var u;if(typeof(u0)=="undefined")
u=randn(n);else
u=u0;u=mulScalarVector(1/norm(u),u);var lambda=1;for(k=0;k<maxIters;k++){u=mulMatrixVector(A,u);lambda=norm(u);u=mulScalarVector(1/lambda,u);}
return{"v":lambda,"u":u};}
function eig_orthogonalIteration(A,r){if(r==1)
return eig_powerIteration(A);const maxIters=1000;var k;const n=A.length;var Q=randn(n,r);var normQ=norm(Q,1);Q=entrywisediv(Q,mul(ones(n),normQ));var QR;var Z;const TOL=1e-11;var V;for(k=0;k<maxIters;k++){Z=mulMatrixMatrix(A,Q);if(Math.floor(k/50)==k/50){V=mulMatrixMatrix(transpose(Q),Z);if(norm(subMatrices(Z,mulMatrixMatrix(Q,diag(diag(V)))))<TOL)
break;}
Q=qroriginal(Z,r).Q;}
V=mulMatrixMatrix(transpose(Q),mulMatrixMatrix(A,Q));return{"V":diag(V),"U":Q};}
function eig_inverseIteration(A,lambda){var perturbation=0.0001*lambda;if(typeof(maxIters)=="undefined")
var maxIters=100;var k;const n=A.length;var A_lambdaI=sub(A,mul(lambda+perturbation,eye(n)));var QR=qr(A_lambdaI);while(QR.rank<n){perturbation*=10;A_lambdaI=sub(A,mul(lambda+perturbation,eye(n)));QR=qr(A_lambdaI);}
var u=sub(mul(2,rand(n)),1);u=mulScalarVector(1/norm(u),u);var v;var r;var norminfA=norminf(A);k=0;do{u=solveWithQRcolumnpivoting(QR,u);v=norm(u);u=entrywisediv(u,v);r=mulMatrixVector(A_lambdaI,u);k++;}while(k<maxIters&&maxVector(absVector(r))<1e-10*norminfA);return u;}
function eigenvector(A,lambda){return eig_inverseIteration(A,lambda,2);}
function eig_inverseOrthogonalIteration(A,r){if(r==1)
return eig_inverseIteration(A);const maxIters=1000;var k;const n=A.length;var QR=qr(A);var Q=randn(n,r);var normQ=norm(Q,1);Q=entrywisediv(Q,mul(ones(n),normQ));var QR;var Z;const TOL=1e-11;var V;for(k=0;k<maxIters;k++){Z=solveWithQRcolumnpivotingMultipleRHS(QR,Q);if(Math.floor(k/50)==k/50){V=mulMatrixMatrix(transpose(Q),Z);if(norm(subMatrices(Z,mulMatrixMatrix(Q,V)))<TOL)
break;}
Q=qroriginal(Z,r).Q;}
V=mulMatrixMatrix(transpose(Q),mulMatrixMatrix(A,Q));return{"V":diag(V),"U":Q,"iters":k};}
function eig_bisect(A,K){var x,y,z;var T=tridiagonalize(A);const n=T.n;var a=diag(T);var b=zeros(n);var i;for(i=0;i<n-1;i++)
b[i]=T.val[i*n+i+1];var y0=a[0]-b[0];var z0=a[0]+b[0];for(var i=1;i<n;i++){var yi=a[i]-b[i]-b[i-1];var zi=a[i]+b[i]+b[i-1];if(yi<y0)
y0=yi;if(zi>z0)
z0=zi;}
var polyq=function(x,a,b,n){var qi_1=a[0]-x;var qi;var signchanges=0;if(qi_1<EPS)
signchanges=1;var i;for(i=1;i<n;i++){qi=(a[i]-x)-b[i-1]*b[i-1]/qi_1;if(qi<EPS)
signchanges++;if(Math.abs(qi)<EPS)
qi_1=EPS;else
qi_1=qi;}
return signchanges;};const TOL=1e-10;var lambda=zeros(K);var xu=entrywisemul(z0,ones(K));y=y0;var n_lowerthan_x;for(var k=1;k<=K;k++){z=xu[k-1];while(Math.abs(z-y)>TOL*(Math.abs(y)+Math.abs(z))){x=(y+z)/2;n_lowerthan_x=polyq(x,a,b,n);if(n_lowerthan_x>=k)
z=x;else
y=x;for(var j=k+1;j<=K;j++)
if(n_lowerthan_x>=j)
xu[j-1]=x;}
lambda[k-1]=(y+z)/2;}
var u=eigenvector(A,lambda[0]);var U=mat([u],false);for(k=1;k<K;k++){var perturbtol=10*Math.max(EPS,Math.abs(EPS*lambda[k-1]));if(lambda[k]<lambda[k-1]+perturbtol)
lambda[k]=lambda[k-1]+perturbtol;u=eigenvector(A,lambda[k]);U=mat([U,u],false);U=qroriginal(U,U.n).Q;}
return{U:U,V:lambda};}
function bidiagonalize(A,computeU,thinU,computeV){var j;const m=A.length;const n=A.n;var B;B=matrixCopy(A);var householder;if(computeU){if(thinU){var U=eye(m,n);var nU=n;}
else{var U=eye(m);var nU=m;}}
if(computeV){var V=eye(n);}
var updateB1=function(j,v,beta){var i,k;var Btv=zeros(n-j);var n_j=n-j;var m_j=m-j;for(i=0;i<m_j;i++){var Bi=(i+j)*n+j;for(k=0;k<n_j;k++)
Btv[k]+=v[i]*B.val[Bi+k];}
for(i=0;i<m_j;i++){var betavk=beta*v[i];var Bi=(i+j)*n+j;for(k=0;k<n_j;k++){B.val[Bi+k]-=betavk*Btv[k];}}};var updateB2=function(j,v,beta){var i,k;var n_j_1=n-j-1;for(i=j;i<m;i++){var Bi=i*n+j+1;var Bv=0;for(k=0;k<n_j_1;k++)
Bv+=B.val[Bi+k]*v[k];var betaBvk=beta*Bv;for(k=0;k<n_j_1;k++){B.val[Bi+k]-=betaBvk*v[k];}}};if(computeV){var updateV=function(j,v,beta){var i,k;var n_j_1=n-j-1;for(i=0;i<n;i++){var Vi=i*n+j+1;var Vv=0;for(k=0;k<n_j_1;k++)
Vv+=V.val[Vi+k]*v[k];var betaVvk=beta*Vv;for(k=0;k<n_j_1;k++){V.val[Vi+k]-=betaVvk*v[k];}}};}
if(computeU){var hv=new Array(n);var hb=new Array(n);}
for(j=0;j<n;j++){if(j<m-1){householder=house(get(B,range(j,m),j));updateB1(j,householder.v,householder.beta);if(computeU){hv[j]=vectorCopy(householder.v);hb[j]=householder.beta;}}
if(j<n-2){householder=house(B.row(j).subarray(j+1,n));updateB2(j,householder.v,householder.beta);if(computeV){updateV(j,householder.v,householder.beta);}}}
if(computeU){var updateU=function(j,v,beta){var i,k;var vtU=zeros(nU);for(i=j;i<m;i++){var Ui=i*nU;var i_j=i-j;for(k=0;k<nU;k++)
vtU[k]+=v[i_j]*U.val[Ui+k];}
for(i=j;i<m;i++){var betavk=beta*v[i-j];var Ui=i*nU;for(k=0;k<nU;k++){U.val[Ui+k]-=betavk*vtU[k];}}};var nj=Math.min(n-1,m-2);for(j=nj;j>=0;j--){updateU(j,hv[j],hb[j]);}}
if(computeU&&computeV){return{"U":U,"V":V,"B":B};}
else if(computeV)
return{"V":V,"B":B};else if(computeU)
return{"U":U,"B":B};else
return B;}
function GolubKahanSVDstep(B,i,j,m,n,computeUV){if(type(B)!="matrix")
return B;if(n<2)
return B;const rn2=(i+n-2)*B.n+j;const dm=B.val[rn2+n-2];const fm=B.val[rn2+n-1];var fm_1;if(n>2)
fm_1=B.val[(i+n-3)*B.n+j+n-2];else
fm_1=0;const dn=B.val[(i+n-1)*B.n+j+n-1];const d=(dm*dm+fm_1*fm_1-dn*dn-fm*fm)/2;const t2=dm*fm*dm*fm;const mu=dn*dn+fm*fm-t2/(d+Math.sign(d)*Math.sqrt(d*d+t2));var k;var y=-mu;var z=0.0;var r0=i*B.n+j;for(k=0;k<n;k++){y+=B.val[r0]*B.val[r0];z+=B.val[r0]*B.val[r0+1];r0+=B.n;}
var G;var cs;var postmulgivens=function(c,s,k1,k2){var jj;var t1;var t2;var rj=i*B.n+j;for(jj=0;jj<m;jj++){t1=B.val[rj+k1];t2=B.val[rj+k2];B.val[rj+k1]=c*t1-s*t2;B.val[rj+k2]=s*t1+c*t2;rj+=B.n;}}
var premulgivens=function(c,s,k1,k2){var jj;const ri=(i+k1)*B.n+j;const rk=(i+k2)*B.n+j;var t1;var t2;for(jj=0;jj<n;jj++){t1=B.val[ri+jj];t2=B.val[rk+jj];B.val[ri+jj]=c*t1-s*t2;B.val[rk+jj]=s*t1+c*t2;}}
if(computeUV){var csU=new Array(n-1);var csV=new Array(n-1);}
for(k=0;k<n-1;k++){cs=givens(y,z);postmulgivens(cs[0],cs[1],k,k+1);if(computeUV){csV[k]=[cs[0],cs[1]];}
y=B.val[(i+k)*B.n+j+k];z=B.val[(i+k+1)*B.n+j+k];cs=givens(y,z);premulgivens(cs[0],cs[1],k,k+1);if(computeUV){csU[k]=[cs[0],cs[1]];}
if(k<n-2){y=B.val[(i+k)*B.n+j+k+1];z=B.val[(i+k)*B.n+j+k+2];}}
if(computeUV)
return{csU:csU,csV:csV};}
function svd(A,computeUV){if(type(A)=="vector"||(type(A)=="matrix"&&A.n==1)){return{"U":matrixCopy(A),"S":ones(1,1),"V":ones(1,1),"s":[1]};}
if(A.m==1){return{"U":ones(1,1),"S":ones(1,1),"V":transpose(A),"s":[1]};}
var i;var m=A.length;var n=A.n;var Atransposed=false;if(n>m){Atransposed=true;var At=transposeMatrix(A);n=m;m=At.length;}
var computeU=false;var computeV=false;var thinU=false;if(typeof(computeUV)!="undefined"&&computeUV!==false){if(computeUV==="full"){computeU=true;computeV=true;thinU=false;}
else if(computeUV===true||computeUV==="thin"){computeU=true;computeV=true;thinU=true;}
else if(typeof(computeUV)=="string"){if(computeUV.indexOf("U")>=0)
computeU=true;if(computeUV.indexOf("V")>=0)
computeV=true;if(computeUV.indexOf("thin")>=0)
thinU=true;}
var UBV;if(Atransposed){var tmp=computeU;computeU=computeV;computeV=tmp;UBV=bidiagonalize(At,computeU,thinU,computeV);}
else
UBV=bidiagonalize(A,computeU,thinU,computeV);if(computeU){var U=transpose(UBV.U);}
else
var U=undefined;if(computeV){var V=UBV.V;var Vt=transposeMatrix(V);}
else
var V=undefined;var B=UBV.B;}
else{if(Atransposed)
var B=bidiagonalize(At,false,false,false);else
var B=bidiagonalize(matrixCopy(A),false,false,false);}
var B22;var U22;var V22;var cs;var q;var p;var k;const TOL=1e-11;var iter=0;do{for(i=0;i<n-1;i++){if(Math.abs(B.val[i*B.n+i+1])<TOL*(Math.abs(B.val[i*B.n+i])+Math.abs(B.val[(i+1)*B.n+i+1]))){B.val[i*B.n+i+1]=0;}}
q=0;while(q<n&&Math.abs(B.val[(n-q-1)*B.n+n-q-2])<TOL&&Math.abs(B.val[(n-q-2)*B.n+n-q-1])<TOL){q++;}
if(q==n-1)
q=n;p=0;while(p<n-q&&Math.abs(B.val[p*B.n+p+1])<TOL*(Math.abs(B.val[p*B.n+p])+Math.abs(B.val[(p+1)*B.n+(p+1)]))){p++;}
if(q<n){var DiagonalofB22isZero=-1;for(k=p;k<n-q;k++){if(Math.abs(B.val[k*B.n+k])<TOL){DiagonalofB22isZero=k;break;}}
if(DiagonalofB22isZero>=0){if(DiagonalofB22isZero<n-q-1){for(k=DiagonalofB22isZero+1;k<n;k++){cs=givens(B.val[k*B.n+k],B.val[DiagonalofB22isZero*B.n+k]);premulGivens(cs[0],cs[1],k,DiagonalofB22isZero,B);if(computeU)
premulGivens(cs[0],cs[1],k,DiagonalofB22isZero,U);}}
else{for(k=n-q-2;k>=p;k--){cs=givens(B.val[k*B.n+k],B.val[k*B.n+n-q-1]);postmulGivens(cs[0],cs[1],k,n-q-1,B);if(computeV)
premulGivens(cs[0],cs[1],k,n-q-1,Vt);}}}
else{if(computeUV){var GKstep=GolubKahanSVDstep(B,p,p,n-q-p,n-q-p,true);for(var kk=0;kk<n-q-p-1;kk++){if(computeU)
premulGivens(GKstep.csU[kk][0],GKstep.csU[kk][1],p+kk,p+kk+1,U);if(computeV)
premulGivens(GKstep.csV[kk][0],GKstep.csV[kk][1],p+kk,p+kk+1,Vt);}}
else{GolubKahanSVDstep(B,p,p,n-q-p,n-q-p);}}}
iter++;}while(q<n);if(computeUV){if(computeV)
V=transposeMatrix(Vt);var s=diag(B);var signs=zeros(n);for(i=0;i<n;i++){if(s[i]<0){if(computeV)
set(V,[],i,minus(get(V,[],i)));s[i]=-s[i];}}
var indexes=sort(s,true,true);if(computeV)
V=get(V,[],indexes);if(computeU){if(!thinU){for(i=n;i<m;i++)
indexes.push(i);}
U=get(U,indexes,[]);}
if(thinU)
var S=diag(s);else
var S=mat([diag(s),zeros(m-n,n)],true);var Ut=undefined;if(computeU)
Ut=transpose(U);if(Atransposed){if(thinU)
return{"U":V,"S":S,"V":Ut,"s":s};else
return{"U":V,"S":transpose(S),"V":Ut,"s":s};}
else{return{"U":Ut,"S":S,"V":V,"s":s};}}
else
return sort(abs(diag(B)),true);}
function rank(A){const s=svd(A);var rank=0;var i;for(i=0;i<s.length;i++)
if(s[i]>1e-10)
rank++;return rank;}
function nullspace(A){const s=svd(A,"V");const n=A.n;var rank=0;const TOL=1e-8;while(rank<n&&s.s[rank]>TOL)
rank++;if(rank<n)
return get(s.V,[],range(rank,n));else
return zeros(n);}
function orth(A){const s=svd(A,"thinU");const n=A.n;var rank=0;const TOL=1e-8;while(rank<n&&s.s[rank]>TOL)
rank++;return get(s.U,[],range(0,rank));}
function spVector(n,values,indexes){this.length=n;this.size=[n,1];this.type="spvector";if(arguments.length<=2){if(arguments.length==1)
var nnz=n;else
var nnz=values;this.val=new Float64Array(nnz);this.ind=new Uint32Array(nnz);}
else{var nnz=values.length;this.val=new Float64Array(values);this.ind=new Uint32Array(indexes);}
this.nnz=nnz;}
spVector.prototype.get=function(i){var k=this.ind.indexOf(i);if(k<0)
return 0;else
return this.val[k];}
spVector.prototype.set=function(i,value){if(i>this.n){error("Error in spVector.set(i,value): i > this.length)");return undefined;}
var k=this.ind.indexOf(i);if(k<0){var ind=new Uint32Array(this.nnz+1);var val=new Float64Array(this.nnz+1);k=0;while(this.ind[k]<i){ind[k]=this.ind[k];val[k]=this.val.ind[k];k++;}
ind[k]=i;val[k]=value;ind.set(this.ind.subarray(k),k+1);val.set(this.val.subarray(k),k+1);this.nnz++;}
else
this.val[k]=value;return value;}
spVector.prototype.copy=function(){return new spVector(this.n,this.val,this.ind);}
function spMatrix(m,n,values,cols,rows){this.length=m;this.m=m;this.n=n;this.size=[m,n];this.type="spmatrix";if(arguments.length<=3){if(arguments.length==2)
var nnz=m*n;else
var nnz=values;this.rowmajor=true;this.val=new Float64Array(nnz);this.cols=new Uint32Array(nnz);this.rows=new Uint32Array(m+1);}
else{var nnz=values.length;if(rows.length==nnz&&cols.length==n+1&&cols[cols.length-1]==nnz){this.rowmajor=false;this.val=new Float64Array(values);this.cols=new Uint32Array(cols);this.rows=new Uint32Array(rows);}
else{this.rowmajor=true;this.val=new Float64Array(values);this.cols=new Uint32Array(cols);this.rows=new Uint32Array(rows);}}
this.nnz=nnz;}
spMatrix.prototype.copy=function(){return new spMatrix(this.m,this.n,this.val,this.cols,this.rows);}
spMatrix.prototype.toRowmajor=function(){if(this.rowmajor)
return this.copy();else{return sparseMatrixRowMajor(fullMatrix(this));}}
spMatrix.prototype.row=function(i){if(this.rowmajor){return new spVector(this.n,this.val.subarray(this.rows[i],this.rows[i+1]),this.cols.subarray(this.rows[i],this.rows[i+1]));}
else{error("Cannot extract sparse column from a sparse matrix in row major format.");return undefined;}}
spMatrix.prototype.col=function(j){if(!this.rowmajor)
return new spVector(this.m,this.val.subarray(this.cols[j],this.cols[j+1]),this.rows.subarray(this.cols[j],this.cols[j+1]));else{error("Cannot extract sparse column from a sparse matrix in row major format.");return undefined;}}
spMatrix.prototype.get=function(i,j){if(this.rowmajor){var rowind=this.cols.subarray(this.rows[i],this.rows[i+1]);var k=rowind.indexOf(j);if(k<0)
return 0;else
return this.val[this.rows[i]+k];}
else{var colind=this.rows.subarray(this.cols[j],this.cols[j+1]);var k=colind.indexOf(i);if(k<0)
return 0;else
return this.val[this.cols[j]+k];}}
function spgetRows(A,rowsrange){var n=rowsrange.length;if(A.rowmajor){if(n>1){var rowsidx=sort(rowsrange);var Ai=new Array(n);var nnz=0;for(var i=0;i<n;i++){Ai[i]=A.row(rowsidx[i]);nnz+=Ai[i].val.length;}
var val=new Float64Array(nnz);var cols=new Uint32Array(nnz);var rows=new Uint32Array(n+1);var k=0;for(var i=0;i<n;i++){rows[i]=k;val.set(Ai[i].val,k);cols.set(Ai[i].ind,k);k+=Ai[i].val.length;}
rows[i]=k;return new spMatrix(n,A.n,val,cols,rows);}
else
return A.row(rowsrange[0]);}
else{return getRows(fullMatrix(A),rowsrange);}}
function fullVector(x){var k;const n=x.length;const nnz=x.val.length;var a=new Float64Array(n);for(k=0;k<nnz;k++)
a[x.ind[k]]=x.val[k];return a;}
function fullMatrix(S){const n=S.n;if(S.rowmajor){var k;const m=S.m;var A=new Float64Array(m*n);var ri=0;for(var i=0;i<m;i++){var s=S.rows[i];var e=S.rows[i+1];for(k=s;k<e;k++){A[ri+S.cols[k]]=S.val[k];}
ri+=n;}
return new Matrix(m,n,A,true);}
else{var k;var A=new Float64Array(S.m*n);for(var j=0;j<n;j++){var s=S.cols[j];var e=S.cols[j+1];for(k=s;k<e;k++){var i=S.rows[k];A[i*n+j]=S.val[k];}}
return new Matrix(S.m,n,A,true);}}
function full(A){switch(type(A)){case "spvector":return fullVector(A);break;case "spmatrix":return fullMatrix(A);break;default:return A;break;}}
function sparseVector(a){var i,k;const n=a.length;var val=new Array();var ind=new Array();for(i=0;i<n;i++){if(!isZero(a[i])){val.push(a[i]);ind.push(i);}}
return new spVector(n,val,ind);}
function sparseMatrix(A){var i,j;const m=A.m;const n=A.n;var val=new Array();var rows=new Array();var cols=new Uint32Array(n+1);var k;for(j=0;j<n;j++){k=j;for(i=0;i<m;i++){if(!isZero(A.val[k])){val.push(A.val[k]);rows.push(i);cols[j+1]++;}
k+=n;}}
for(j=1;j<n;j++)
cols[j+1]+=cols[j];return new spMatrix(m,n,val,cols,rows);}
function sparseMatrixRowMajor(A){var i,j;const m=A.m;const n=A.n;var val=new Array();var cols=new Array();var rows=new Uint32Array(m+1);var k=0;for(i=0;i<m;i++){for(j=0;j<n;j++){if(!isZero(A.val[k])){val.push(A.val[k]);rows[i+1]++;cols.push(j);}
k++;}}
for(i=1;i<m;i++)
rows[i+1]+=rows[i];return new spMatrix(m,n,val,cols,rows);}
function sparse(A,rowmajor){if(typeof(rowmajor)=="undefined")
var rowmajor=true;switch(type(A)){case "vector":return sparseVector(A);break;case "matrix":if(rowmajor)
return sparseMatrixRowMajor(A);else
return sparseMatrix(A);break;case "spvector":case "spmatrix":return A.copy();break;default:return A;break;}}
function speye(m,n){if(typeof(n)=="undefined")
var n=m;if(m==1&&n==1)
return 1;var e=(m<n)?m:n;var val=ones(e);var rows=range(e+1);var cols=rows.slice(0,e);return new spMatrix(m,n,val,cols,rows);}
function spdiag(val){var n=val.length;var rows=range(n+1);var cols=rows.slice(0,n);var tv=type(val);if(tv=="vector")
return new spMatrix(n,n,val,cols,rows);else{error("Error in spdiag( x ): x is a "+tv+" but should be a vector.");return undefined;}}
function transposespVector(a){return new Matrix(1,a.length,fullVector(a),true);}
function transposespMatrix(A){return new spMatrix(A.n,A.m,A.val,A.rows,A.cols);}
function spmat(elems,rowwise){var k;var elemtypes=new Array(elems.length);for(k=0;k<elems.length;k++){elemtypes[k]=type(elems[k]);}
if(typeof(rowwise)=="undefined")
var rowwise=true;if(elems.length==0){return[];}
var m=0;var n=0;var nnz=0;var i;var j;if(rowwise){var res=new Array();for(k=0;k<elems.length;k++){switch(elemtypes[k]){case "vector":var v=sparseVector(elems[k]);res.push(v);m+=1;n=elems[k].length;nnz+=v.val.length;break;case "spvector":res.push(elems[k]);n=elems[k].length;m+=1;nnz+=elems[k].val.length;break;case "spmatrix":for(var r=0;r<elems[k].m;r++)
res.push(elems[k].row(r));res.push(elems[k]);n=elems[k].length;m+=1;nnz+=elems[k].val.length;break;default:return undefined;break;}}
var M=new spMatrix(m,n,nnz);var p=0;M.rows[0]=0;for(k=0;k<res.length;k++){if(res[k].val.length>1){M.val.set(new Float64Array(res[k].val),p);M.cols.set(new Uint32Array(res[k].ind),p);M.rows[k+1]=M.rows[k]+res[k].val.length;p+=res[k].val.length;}
else if(res[k].val.length==1){M.val[p]=res[k].val[0];M.cols[p]=res[k].ind[0];M.rows[k+1]=M.rows[k]+1;p+=1;}}
return M;}
else{error("spmat(..., false) for columnwise concatenation of sparse vectors not yet implemented");return res;}}
function mulScalarspVector(a,b){const nnz=b.val.length;var c=b.copy();for(var k=0;k<nnz;k++)
c.val[k]*=a;return c;}
function mulScalarspMatrix(a,B){const nnz=B.nnz;var C=B.copy();for(var k=0;k<nnz;k++)
C.val[k]*=a;return C;}
function spdot(a,b){const nnza=a.val.length;const nnzb=b.val.length;var c=0;var ka=0;var kb=0;while(ka<nnza&&kb<nnzb){var i=a.ind[ka];while(b.ind[kb]<i&&kb<nnzb)
kb++;if(b.ind[kb]==i)
c+=a.val[ka]*b.val[kb];ka++;}
return c;}
function dotspVectorVector(a,b){const nnza=a.val.length;var c=0;for(var ka=0;ka<nnza;ka++)
c+=a.val[ka]*b[a.ind[ka]];return c;}
function mulMatrixspVector(A,b){const m=A.m;const n=A.n;const nnz=b.val.length;var c=zeros(m);var ri=0;for(var i=0;i<n;i++){for(var k=0;k<nnz;k++)
c[i]+=A.val[ri+b.ind[k]]*b.val[k];ri+=n;}
return c;}
function mulspMatrixVector(A,b){const m=A.m;const n=A.n;var c=zeros(m);if(A.rowmajor){for(var i=0;i<m;i++){var s=A.rows[i];var e=A.rows[i+1];for(var k=s;k<e;k++){c[i]+=A.val[k]*b[A.cols[k]];}}}
else{for(var j=0;j<n;j++){var s=A.cols[j];var e=A.cols[j+1];var bj=b[j];for(var k=s;k<e;k++){c[A.rows[k]]+=A.val[k]*bj;}}}
return c;}
function mulspMatrixTransVector(A,b){const m=A.m;const n=A.n;var c=zeros(n);if(A.rowmajor){for(var j=0;j<m;j++){var s=A.rows[j];var e=A.rows[j+1];var bj=b[j];for(var k=s;k<e;k++){c[A.cols[k]]+=A.val[k]*bj;}}}
else{for(var j=0;j<n;j++){var s=A.cols[j];var e=A.cols[j+1];for(var k=s;k<e;k++){c[j]+=A.val[k]*b[A.rows[k]];}}}
return c;}
function mulspMatrixspVector(A,b){const m=A.m;const n=A.n;var c=zeros(m);const nnzb=b.val.length;if(A.rowmajor){for(var i=0;i<m;i++){c[i]=spdot(A.row(i),b);}}
else{for(var kb=0;kb<nnzb;kb++){var j=b.ind[kb];var bj=b.val[kb];var s=A.cols[j];var e=A.cols[j+1];for(var k=s;k<e;k++){c[A.rows[k]]+=A.val[k]*bj;}}}
return c;}
function mulspMatrixTransspVector(A,b){const m=A.m;const n=A.n;var c=zeros(n);const nnzb=b.val.length;if(A.rowmajor){for(var kb=0;kb<nnzb;kb++){var j=b.ind[kb];var bj=b.val[kb];var s=A.rows[j];var e=A.rows[j+1];for(var k=s;k<e;k++){c[A.cols[k]]+=A.val[k]*bj;}}}
else{for(var i=0;i<n;i++){var kb=0;var s=A.cols[i];var e=A.cols[i+1];for(var ka=s;ka<e;ka++){var j=A.rows[ka];while(b.ind[kb]<j&&kb<nnzb)
kb++;if(b.ind[kb]==i)
c[i]+=A.val[ka]*b.val[kb];}}}
return c;}
function mulspMatrixspMatrix(A,B){const m=A.m;const n=A.n;const n2=B.n;var c=zeros(m,n2);if(A.rowmajor){if(B.rowmajor){for(var ic=0;ic<m;ic++){var sa=A.rows[ic];var ea=A.rows[ic+1];for(var ka=sa;ka<ea;ka++){var j=A.cols[ka];var aj=A.val[ka];var s=B.rows[j];var e=B.rows[j+1];var rc=ic*n2;for(var k=s;k<e;k++){c.val[rc+B.cols[k]]+=aj*B.val[k];}}}}
else{var kc=0;for(var i=0;i<m;i++){for(var j=0;j<n2;j++){c.val[kc]=spdot(A.row(i),B.col(j));kc++;}}}}
else{if(B.rowmajor){for(var ja=0;ja<n;ja++){var sa=A.cols[ja];var ea=A.cols[ja+1];var sb=B.rows[ja];var eb=B.rows[ja+1];for(var ka=sa;ka<ea;ka++){var rc=A.rows[ka]*n2;var aij=A.val[ka];for(var kb=sb;kb<eb;kb++){c.val[rc+B.cols[kb]]+=aij*B.val[kb];}}}}
else{for(var jc=0;jc<n2;jc++){var sb=B.cols[jc];var eb=B.cols[jc+1];for(var kb=sb;kb<eb;kb++){var j=B.rows[kb];var bj=B.val[kb];var s=A.cols[j];var e=A.cols[j+1];for(var k=s;k<e;k++){c.val[A.rows[k]*n2+jc]+=A.val[k]*bj;}}}}}
return c;}
function mulMatrixspMatrix(A,B){const m=A.m;const n=A.n;const n2=B.n;var c=zeros(m,n2);if(B.rowmajor){for(var ja=0;ja<n;ja++){var sb=B.rows[ja];var eb=B.rows[ja+1];for(var i=0;i<m;i++){var rc=i*n2;var aij=A.val[i*n+ja];for(var kb=sb;kb<eb;kb++){c.val[rc+B.cols[kb]]+=aij*B.val[kb];}}}}
else{for(var jc=0;jc<n2;jc++){var sb=B.cols[jc];var eb=B.cols[jc+1];for(var kb=sb;kb<eb;kb++){var j=B.rows[kb];var bj=B.val[kb];for(i=0;i<m;i++){c.val[i*n2+jc]+=A.val[i*n+j]*bj;}}}}
return c;}
function mulspMatrixMatrix(A,B){const m=A.m;const n=A.n;const n2=B.n;var c=zeros(m,n2);if(A.rowmajor){for(var i=0;i<m;i++){var sa=A.rows[i];var ea=A.rows[i+1];for(var ka=sa;ka<ea;ka++){var ai=A.val[ka];var rb=A.cols[ka]*n2;var rc=i*n2;for(j=0;j<n2;j++){c.val[rc+j]+=ai*B.val[rb+j];}}}}
else{for(var j=0;j<n;j++){var s=A.cols[j];var e=A.cols[j+1];for(var k=s;k<e;k++){var i=A.rows[k];for(var jc=0;jc<n2;jc++)
c.val[i*n2+jc]+=A.val[k]*B.val[j*n2+jc];}}}
return c;}
function entrywisemulspVectors(a,b){const nnza=a.val.length;const nnzb=b.val.length;var val=new Array();var ind=new Array();var ka=0;var kb=0;while(ka<nnza&&kb<nnzb){var i=a.ind[ka];while(b.ind[kb]<i&&kb<nnzb)
kb++;if(b.ind[kb]==i){var aibi=a.val[ka]*b.val[kb];if(!isZero(aibi)){val.push(aibi);ind.push(i);}}
ka++;}
return new spVector(a.length,val,ind);}
function entrywisemulspVectorVector(a,b){var c=a.copy();const nnz=a.val.length;for(var k=0;k<nnz;k++){c.val[k]*=b[a.ind[k]];}
return c;}
function entrywisemulspMatrices(A,B){if(A.rowmajor){if(B.rowmajor){var val=new Array();var cols=new Array();var rows=new Uint32Array(A.m+1);var ka;var kb;var i;for(i=0;i<A.m;i++){ka=A.rows[i];kb=B.rows[i];var ea=A.rows[i+1];var eb=B.rows[i+1];while(ka<ea&kb<eb){var j=A.cols[ka];while(B.cols[kb]<j&&kb<eb)
kb++;if(B.cols[kb]==j){val.push(A.val[ka]*B.val[kb]);cols.push(j);rows[i+1]++;}
ka++;}}
for(i=1;i<A.m;i++)
rows[i+1]+=rows[i];return new spMatrix(A.m,A.n,val,cols,rows);}
else{return entrywisemulspMatrixMatrix(B,fullMatrix(A));}}
else{if(B.rowmajor){return entrywisemulspMatrixMatrix(A,fullMatrix(B));}
else{var val=new Array();var cols=new Uint32Array(A.n+1);var rows=new Array();var ka;var kb;var j;for(j=0;j<A.n;j++){ka=A.cols[j];kb=B.cols[j];var ea=A.cols[j+1];var eb=B.cols[j+1];while(ka<ea&kb<eb){var i=A.rows[ka];while(B.rows[kb]<i&&kb<eb)
kb++;if(B.rows[kb]==i){val.push(A.val[ka]*B.val[kb]);rows.push(i);cols[j+1]++;}
ka++;}}
for(j=1;j<A.n;j++)
cols[j+1]+=cols[j];return new spMatrix(A.m,A.n,val,cols,rows);}}}
function entrywisemulspMatrixMatrix(A,B){var c=A.copy();const nnz=A.val.length;const n=A.n;const m=A.m;if(A.rowmajor){for(i=0;i<m;i++){var s=c.rows[i];var e=c.rows[i+1];var r=i*n;for(var k=s;k<e;k++){c.val[k]*=B.val[r+c.cols[k]];}}}
else{for(j=0;j<n;j++){var s=c.cols[j];var e=c.cols[j+1];for(var k=s;k<e;k++){c.val[k]*=B.val[c.rows[k]*n+j];}}}
return c;}
function addScalarspVector(a,b){const nnzb=b.val.length;const n=b.length;var c=zeros(n);var k;for(k=0;k<n;k++)
c[k]=a;for(k=0;k<nnzb;k++)
c[b.ind[k]]+=b.val[k];return c;}
function addVectorspVector(a,b){const nnzb=b.val.length;const n=b.length;var c=new Float64Array(a);for(var k=0;k<nnzb;k++)
c[b.ind[k]]+=b.val[k];return c;}
function addspVectors(a,b){const nnza=a.val.length;const nnzb=b.val.length;var c=zeros(a.length);var k;for(k=0;k<nnza;k++)
c[a.ind[k]]=a.val[k];for(k=0;k<nnzb;k++)
c[b.ind[k]]+=b.val[k];return sparseVector(c);}
function addScalarspMatrix(a,B){const nnzb=B.val.length;const m=B.m;const n=B.n;const mn=m*n;var C=zeros(m,n);var i;for(i=0;i<mn;i++)
C.val[i]=a;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]+=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]+=B.val[k];}}
return C;}
function addMatrixspMatrix(A,B){const nnzb=B.val.length;const m=B.m;const n=B.n;const mn=m*n;var C=matrixCopy(A);var i;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]+=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]+=B.val[k];}}
return C;}
function addspMatrices(A,B){const nnza=A.val.length;const nnzb=B.val.length;const m=A.m;const n=A.n;var C=fullMatrix(A);var i;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]+=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]+=B.val[k];}}
return sparseMatrixRowMajor(C);}
function spsaxpy(a,x,y){const nnz=x.val.length;for(var k=0;k<nnz;k++)
y[x.ind[k]]+=a*x.val[k];}
function subScalarspVector(a,b){const nnzb=b.val.length;const n=b.length;var c=zeros(n);var k;for(k=0;k<n;k++)
c[k]=a;for(k=0;k<nnzb;k++)
c[b.ind[k]]-=b.val[k];return c;}
function subVectorspVector(a,b){const nnzb=b.val.length;const n=b.length;var c=new Float64Array(a);for(var k=0;k<nnzb;k++)
c[b.ind[k]]-=b.val[k];return c;}
function subspVectorVector(a,b){return subVectors(fullVector(a),b);}
function subspVectors(a,b){const nnza=a.val.length;const nnzb=b.val.length;var c=zeros(a.length);var k;for(k=0;k<nnza;k++)
c[a.ind[k]]=a.val[k];for(k=0;k<nnzb;k++)
c[b.ind[k]]-=b.val[k];return sparseVector(c);}
function subScalarspMatrix(a,B){const nnzb=B.val.length;const m=B.m;const n=B.n;const mn=m*n;var C=zeros(m,n);var i;for(i=0;i<mn;i++)
C.val[i]=a;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]-=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]-=B.val[k];}}
return C;}
function subspMatrixMatrix(A,B){return subMatrices(fullMatrix(A),B);}
function subMatrixspMatrix(A,B){const nnzb=B.val.length;const m=B.m;const n=B.n;const mn=m*n;var C=matrixCopy(A);var i;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]-=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]-=B.val[k];}}
return C;}
function subspMatrices(A,B){const nnza=A.val.length;const nnzb=B.val.length;const m=A.m;const n=A.n;var C=fullMatrix(A);var i;if(B.rowmajor){var ri=0;for(i=0;i<m;i++){var s=B.rows[i];var e=B.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+B.cols[k]]-=B.val[k];ri+=n;}}
else{for(i=0;i<n;i++){var s=B.cols[i];var e=B.cols[i+1];for(var k=s;k<e;k++)
C.val[B.rows[k]*n+i]-=B.val[k];}}
return sparseMatrixRowMajor(C);}
function applyspVector(f,x){const nnz=x.val.length;const n=x.length;var res=new Float64Array(n);var i;const f0=f(0);for(i=0;i<n;i++)
res[i]=f0;for(i=0;i<nnz;i++)
res[x.ind[i]]=f(x.val[i]);return res;}
function applyspMatrix(f,X){const nnz=X.val.length;const m=X.m;const n=X.n;const mn=m*n;const f0=f(0);var C=zeros(m,n);var i;if(!isZero(f0)){for(i=0;i<mn;i++)
C.val[i]=f0;}
if(X.rowmajor){var ri=0;for(i=0;i<m;i++){var s=X.rows[i];var e=X.rows[i+1];for(var k=s;k<e;k++)
C.val[ri+X.cols[k]]=f(X.val[k]);ri+=n;}}
else{for(i=0;i<n;i++){var s=X.cols[i];var e=X.cols[i+1];for(var k=s;k<e;k++)
C.val[X.rows[k]*n+i]+=f(X.val[k]);}}
return C;}
function sumspVector(a){return sumVector(a.val);}
function sumspMatrix(A){return sumVector(A.val);}
function sumspMatrixRows(A){var res=zeros(A.n);if(A.rowmajor){for(var k=0;k<A.val.length;k++)
res[A.cols[k]]+=A.val[k];}
else{for(var i=0;i<A.n;i++)
res[i]=sumspVector(A.col(i));}
return new Matrix(1,A.n,res,true);}
function sumspMatrixCols(A){var res=zeros(A.m);if(A.rowmajor){for(var i=0;i<A.m;i++)
res[i]=sumspVector(A.row(i));}
else{for(var k=0;k<A.val.length;k++)
res[A.rows[k]]+=A.val[k];}
return res;}
function prodspMatrixRows(A){if(A.rowmajor){var res=ones(A.n);for(var i=0;i<A.m;i++){var s=A.rows[i];var e=A.rows[i+1];for(var j=0;j<A.n;j++)
if(A.cols.subarray(s,e).indexOf(j)<0)
res[j]=0;for(var k=s;k<e;k++)
res[A.cols[k]]*=A.val[k];}}
else{var res=zeros(A.n);for(var i=0;i<A.n;i++){var a=A.col(i);if(a.val.length==a.length)
res[i]=prodVector(a.val);}}
return new Matrix(1,A.n,res,true);}
function prodspMatrixCols(A){if(A.rowmajor){var res=zeros(A.m);for(var i=0;i<A.m;i++){var a=A.row(i);if(a.val.length==a.length)
res[i]=prodVector(a.val);}}
else{var res=ones(A.m);for(var j=0;j<A.n;j++){var s=A.cols[j];var e=A.cols[j+1];for(var i=0;i<A.m;i++)
if(A.rows.subarray(s,e).indexOf(i)<0)
res[i]=0;for(var k=s;k<e;k++)
res[A.rows[k]]*=A.val[k];}}
return res;}
function spsolvecg(A,b){const n=A.n;const m=A.m;var x=randn(n);var r=subVectors(b,mulspMatrixVector(A,x));var rhoc=dot(r,r);const TOL=1e-8;var delta2=TOL*norm(b);delta2*=delta2;var p=vectorCopy(r);var w=mulspMatrixVector(A,p);var mu=rhoc/dot(p,w);saxpy(mu,p,x);saxpy(-mu,w,r);var rho_=rhoc;rhoc=dot(r,r);var k=1;var updateP=function(tau,r){for(var i=0;i<m;i++)
p[i]=r[i]+tau*p[i];}
while(rhoc>delta2&&k<n){updateP(rhoc/rho_,r);w=mulspMatrixVector(A,p);mu=rhoc/dot(p,w);saxpy(mu,p,x);saxpy(-mu,w,r);rho_=rhoc;rhoc=dot(r,r);k++;}
return x;}
function spcgnr(A,b){const n=A.n;const m=A.m;var x=randn(n);var r=subVectors(b,mulspMatrixVector(A,x));const TOL=1e-8;var delta2=TOL*norm(b);delta2*=delta2;var z=mulspMatrixTransVector(A,r);var rhoc=dot(z,z);var p=vectorCopy(z);var w=mulspMatrixVector(A,p);var mu=rhoc/dot(w,w);saxpy(mu,p,x);saxpy(-mu,w,r);z=mulspMatrixTransVector(A,r);var rho_=rhoc;rhoc=dot(z,z);var k=1;var updateP=function(tau,z){for(var i=0;i<m;i++)
p[i]=z[i]+tau*p[i];}
while(rhoc>delta2&&k<n){updateP(rhoc/rho_,z);w=mulspMatrixVector(A,p);mu=rhoc/dot(w,w);saxpy(mu,p,x);saxpy(-mu,w,r);z=mulspMatrixTransVector(A,r);rho_=rhoc;rhoc=dot(z,z);k++;}
return x;}
function minimize(f,grad,x0){var x;var n=1;if(arguments.length==3){if(typeof(x0)=="number"){if(x0>0&&Math.floor(x0)==x0){n=x0;x=sub(mul(20,rand(n)),10);}
else{n=1;x=x0;}}
else{n=x0.length;x=x0;}}
else{n=1;x=20*Math.random()-10;}
if(n==1)
return secant(f,grad,x);else if(n>500)
return steepestdescent(f,grad,x);else
return bfgs(f,grad,x);}
function secant(f,grad,x0){const TOLx=1e-6;var x=x0;var g=grad(x);var dx=-0.01*g;x+=dx;var gprev,dg;do{gprev=g;g=grad(x);dg=g-gprev;dx*=-g/dg;x+=dx;}while(Math.abs(dx)>TOLx);return x;}
function steepestdescent(f,grad,x0){const TOLobj=1e-8;const TOLx=1e-6;const TOLgrad=1e-4;var x=x0;var xprev;var obj=f(x);var g=grad(x);var normg=norm(g);var iter=0;do{var linesearch=armijo(f,x,obj,g,normg);xprev=vectorCopy(x);prevobj=obj;x=linesearch.x;obj=linesearch.obj;g=grad(x);normg=norm(g);iter++;}while(normg>TOLgrad&&prevobj-obj>TOLobj&&norm(subVectors(x,xprev))>TOLx);console.log(" OBJ: "+obj+", norm(grad): "+normg,"prevobj - obj",prevobj-obj,"iter: ",iter);return x;}
function bfgs(f,grad,x0){const n=x0.length;const TOLobj=1e-8;const TOLx=1e-6;const TOLgrad=1e-4;var x=x0;var xprev;var obj=f(x);var H=eye(n);var g,direction,delta,gamma,ls;var normg;var Hgamma;var dH;var iter=0;do{g=grad(x);normg=norm(g);direction=minusVector(mulMatrixVector(H,g));var linesearch=armijodir(f,x,obj,g,direction);xprev=vectorCopy(x);prevobj=obj;x=linesearch.x;obj=linesearch.obj;delta=subVectors(x,xprev);gamma=subVectors(grad(x),g);Hgamma=mulMatrixVector(H,gamma);var deltagamma=dot(delta,gamma);var delta_=mulScalarVector(1/deltagamma,delta);var deltagammaH=outerprodVectors(delta_,Hgamma);dH=subMatrices(outerprodVectors(delta_,delta,1+dot(gamma,Hgamma)/deltagamma),addMatrices(deltagammaH,transposeMatrix(deltagammaH)));H=add(H,dH);iter++;}while(normg>TOLgrad&&prevobj-obj>TOLobj&&norm(subVectors(x,xprev))>TOLx);console.log(" OBJ: "+obj+", norm(grad): "+normg,"prevobj - obj",prevobj-obj,"iters: ",iter);return x;}
function mincubic(p0,p1,x1,px1,x2,px2,lb,ub){const x1square=x1*x1;const x2square=x2*x2;var A=new Matrix(2,2,[x1square,x1*x1square,x2square,x2*x2square]);var b=new Float64Array([px1-p0-p1*x1,px2-p0-p1*x2]);var c=solve(A,b);var x=(-c[0]+Math.sqrt(c[0]*c[0]-3*c[1]*p1))/(3*c[1]);return Math.min(ub,Math.max(lb,x));}
function minquadratic(p0,p1,px1,x1,lb,ub){var x=-p1/(2*x1*(px1-p0-p1));return Math.min(ub,Math.max(lb,x));}
function armijo(f,xc,fc,g,normg){const alpha=0.0001;const blow=0.1;const bhigh=0.5;const normg2=normg*normg;var lambda=Math.min(1,100/(1+normg));var fgoal=fc-alpha*lambda*normg2;var lambda1=lambda;var xt=subVectors(xc,mulScalarVector(lambda,g));var ft_1=fc;var ft=f(xt);var iter=1;lambda=minquadratic(fc,-normg2,lambda1,ft,blow*lambda1,bhigh*lambda1);var ft_1=ft;var lambda2=lambda1;lambda1=lambda;iter++;while(ft>fgoal&&iter<=10){lambda=mincubic(fc,-normg2,lambda1,ft,lambda2,ft_1,blow*lambda1,bhigh*lambda1);lambda2=lambda1;lambda1=lambda;xt=subVectors(xc,mulScalarVector(lambda,g));ft_1=ft;ft=f(xt);fgoal=fc-alpha*lambda*normg2;iter++;}
return{"lambda":lambda,"x":xt,"obj":ft};}
function armijodir(f,xc,fc,g,d){const alpha=0.0001;const blow=0.1;const bhigh=0.5;const p1=dot(g,d);var lambda=Math.min(1,100/(1+norm(g)));var fgoal=fc+alpha*lambda*p1;var lambda1=lambda;var xt=addVectors(xc,mulScalarVector(lambda,d));var ft_1=fc;var ft=f(xt);var iter=1;lambda=minquadratic(fc,p1,lambda1,ft,blow*lambda1,bhigh*lambda1);var ft_1=ft;var lambda2=lambda1;lambda1=lambda;iter++;while(ft>fgoal&&iter<=10){lambda=mincubic(fc,p1,lambda1,ft,lambda2,ft_1,blow*lambda1,bhigh*lambda1);lambda2=lambda1;lambda1=lambda;xt=addVectors(xc,mulScalarVector(lambda,d));ft_1=ft;ft=f(xt);fgoal=fc+alpha*lambda*p1;iter++;}
return{"lambda":lambda,"x":xt,"obj":ft};}
function nchoosek(n,k){if(k>n||k<0||n<0)
return 0;var i;var res=1;for(i=n-k+1;i<=n;i++)
res*=i;for(i=2;i<=k;i++)
res/=i;return res;}
function mvnrnd(mu,Sigma,N){if(arguments.length<3)
var N=1;var X=randn(N,mu.length);if(issymmetric(Sigma))
var L=chol(Sigma);else
var L=Sigma;return add(mul(ones(N),transpose(mu)),mul(X,transpose(L)));}
function Distribution(distrib,arg1,arg2){if(arguments.length<1){error("Error in new Distribution(name): name is undefined.");return undefined;}
if(typeof(distrib)=="string")
distrib=eval(distrib);this.type="Distribution:"+distrib.name;this.distribution=distrib.name;this.construct=distrib.prototype.construct;this.estimate=distrib.prototype.estimate;this.sample=distrib.prototype.sample;this.pdf=distrib.prototype.pdf;if(distrib.prototype.pmf)
this.pmf=distrib.prototype.pmf;if(distrib.prototype.logpdf)
this.logpdf=distrib.prototype.logpdf;else
this.logpdf=function(x){return log(this.pdf(x));};this.construct(arg1,arg2);}
Distribution.prototype.construct=function(params){}
Distribution.prototype.pdf=function(x){}
Distribution.prototype.sample=function(N){}
Distribution.prototype.estimate=function(X){}
Distribution.prototype.info=function(){var str="{<br>";var i;var Functions=new Array();for(i in this){switch(type(this[i])){case "string":case "boolean":case "number":str+=i+": "+this[i]+"<br>";break;case "vector":str+=i+": "+printVector(this[i])+"<br>";break;case "matrix":str+=i+": matrix of size "+this[i].m+"-by-"+this[i].n+"<br>";break;case "function":Functions.push(i);break;default:str+=i+": "+typeof(this[i])+"<br>";break;}}
str+="<i>Functions: "+Functions.join(", ")+"</i><br>";str+="}";return str;}
function Uniform(params){var that=new Distribution(Uniform,params);return that;}
Uniform.prototype.construct=function(a,b){if(typeof(a)=="undefined"){this.isDiscrete=false;this.a=-1;this.b=1;this.dimension=1;this.px=0.5;this.mean=0;this.variance=1/3;this.std=Math.sqrt(this.variance);}
else{if(typeof(b)=="undefined"){this.isDiscrete=true;if(typeof(a)=="number")
this.values=range(a);else
this.values=a;this.dimension=1;this.mean=(min(this.values)+max(this.values))/2;this.variance=(this.values.length*this.values.length-1)/12;this.std=Math.sqrt(this.variance);}
else{this.isDiscrete=false;this.a=a;this.b=b;this.dimension=size(a,1);this.px=1/prod(sub(b,a));this.mean=mul(0.5,add(a,b));var b_a=sub(b,a);this.variance=entrywisediv(entrywisemul(b_a,b_a),12);this.std=sqrt(this.variance);}}}
Uniform.prototype.pdf=function(x){const tx=type(x);var p=undefined;if(this.isDiscrete){var pdfscalar=function(s,values){return(values.indexOf(s)<0)?0:(1/values.length);};if(tx=="number"){p=pdfscalar(x,this.values);}
else if(tx=="vector"){p=zeros(x.length);for(var i=0;i<x.length;i++)
p[i]=pdfscalar(x[i],this.values);}
else if(tx=="matrix"){p=zeros(x.m,x.n);for(var i=0;i<x.m*x.n;i++)
p.val[i]=pdfscalar(x.val[i],this.values);}}
else{var pdfscalar=function(s,l,u,px){return(s>=l&&s<=u)?px:0;};if(tx=="number"){if(this.dimension==1)
p=pdfscalar(x,this.a,this.b,this.px);}
else if(tx=="vector"){if(this.dimension==1){p=zeros(x.length);for(var i=0;i<x.length;i++)
p[i]=pdfscalar(x[i],this.a,this.b,this.px);}
else if(this.dimension==x.length){p=pdfscalar(x[0],this.a[0],this.b[0],this.px);var k=1;while(k<x.length&&p!=0){p*=pdfscalar(x[k],this.a[k],this.b[k],this.px);k++;}}}
else if(tx=="matrix"){if(this.dimension==1){p=zeros(x.m,x.n);for(var i=0;i<x.m*x.n;i++)
p.val[i]=pdfscalar(x.val[i],this.a,this.b,this.px);}
else if(this.dimension==x.n){p=zeros(x.m);for(var i=0;i<x.m;i++){p[i]=pdfscalar(x.val[i*x.n],this.a[0],this.b[0],this.px);var k=1;while(k<x.n&&p[i]!=0){p[i]*=pdfscalar(x.val[i*x.n+k],this.a[k],this.b[k],this.px);k++;}}}}}
return p;}
Uniform.prototype.sample=function(N){if(typeof(N)=="undefined")
var N=1;if(this.isDiscrete){var s=zeros(N);for(var i=0;i<N;i++){var r=Math.random();var k=1;var n=this.values.length;while(r>k/n)
k++;s[i]=this.values[k-1];}
if(N==1)
return s[0];else
return s;}
else{if(this.dimension==1)
return add(entrywisemul(this.b-this.a,rand(N)),this.a);else{return add(entrywisemul(outerprod(ones(N),sub(this.b,this.a)),rand(N,this.dimension)),outerprod(ones(N),this.a));}}}
Uniform.prototype.estimate=function(X){const tX=type(X);if(tX=="matrix")
var x=X.val;else
var x=X;var i=0;while(i<x.length&&Math.round(x[i])==x[i])
i++;if(i<x.length)
this.isDiscrete=false;else
this.isDiscrete=true;if(this.isDiscrete){for(i=0;i<x.length;i++){var xi=Math.round(x[i]);if(this.values.indexOf(xi)<0)
this.values.push(xi);}
this.dimension=1;this.mean=(min(this.values)+max(this.values))/2;this.variance=(this.values.length*this.values.length-1)/12;this.std=Math.sqrt(this.variance);}
else{if(tX=="matrix"){this.a=min(X,1).val;this.b=max(X).val;this.dimension=this.a.length;}
else{this.a=minVector(X);this.b=maxVector(X);this.dimension=1;}
this.mean=mul(0.5,add(this.a,this.b));var b_a=sub(this.b,this.a);this.variance=entrywisediv(entrywisemul(b_a,b_a),12);this.std=sqrt(this.variance);this.px=1/prod(sub(this.b,this.a));}
return this;}
function Gaussian(params){var that=new Distribution(Gaussian,params);return that;}
Gaussian.prototype.construct=function(mean,variance){if(typeof(mean)=="undefined")
var mu=1;else if(type(mean)=="matrix")
var mu=mean.val;else
var mu=mean;var dim=size(mu,1);if(typeof(variance)=="undefined"){if(dim==1)
var variance=1;else
var variance=ones(dim);}
this.mean=mu;this.variance=variance;this.std=sqrt(this.variance);this.dimension=dim;}
Gaussian.prototype.pdf=function(x){if(this.dimension==1){if(typeof(x)=="number"){var diff=x-this.mean;return Math.exp(-diff*diff/(2*this.variance))/(this.std*Math.sqrt(2*Math.PI));}
else{var diff=sub(x,this.mean);return entrywisediv(exp(entrywisediv(entrywisemul(diff,diff),-2*this.variance)),this.std*Math.sqrt(2*Math.PI));}}
else{if(type(x)=="vector"){if(x.length!=this.dimension){error("Error in Gaussian.pdf(x): x.length = "+x.length+" != "+this.dimension+" = Gaussian.dimension.");return undefined;}
var diff=subVectors(x,this.mean);var u=-0.5*dot(diff,divVectors(diff,this.variance));return Math.exp(u)/(Math.pow(2*Math.PI,0.5*this.dimension)*Math.sqrt(prodVector(this.variance)));}
else{if(x.n!=this.dimension){error("Error in Gaussian.pdf(X): X.n = "+x.n+" != "+this.dimension+" = Gaussian.dimension.");return undefined;}
var p=zeros(x.m);var denominator=Math.pow(2*Math.PI,0.5*this.dimension)*Math.sqrt(prodVector(this.variance));for(var i=0;i<x.m;i++){var diff=subVectors(x.row(i),this.mean);var u=-0.5*dot(diff,divVectors(diff,this.variance));p[i]=Math.exp(u)/denominator;}
return p;}}}
Gaussian.prototype.sample=function(N){if(typeof(N)=="undefined")
var N=1;if(N==1)
var X=add(entrywisemul(this.std,randn(this.dimension)),this.mean);else{var N1=ones(N);var X=add(entrywisemul(outerprod(N1,this.std),randn(N,this.dimension)),outerprod(N1,this.mean));}
return X;}
Gaussian.prototype.estimate=function(X){if(type(X)=="matrix"){this.mean=mean(X,1).val;this.variance=variance(X,1).val;this.std=undefined;this.dimension=X.n;}
else{this.mean=mean(X);this.variance=variance(X);this.std=Math.sqrt(this.variance);this.dimension=1;}
return this;}
function mvGaussian(params){var that=new Distribution(mvGaussian,params);return that;}
mvGaussian.prototype.construct=function(mean,covariance){if(typeof(mean)=="undefined")
var mu=1;else if(type(mean)=="matrix")
var mu=mean.val;else
var mu=mean;var dim=size(mu,1);if(typeof(covariance)=="undefined"){if(dim==1)
var covariance=1;else
var covariance=eye(dim);}
this.mean=mu;this.variance=covariance;this.dimension=dim;this.L=chol(this.variance);if(typeof(this.L)=="undefined")
error("Error in new Distribution (mvGaussian, mu, Sigma): Sigma is not positive definite");this.det=det(this.variance);}
mvGaussian.prototype.pdf=function(x){if(this.dimension==1){if(typeof(x)=="number"){var diff=x-this.mean;return Math.exp(-diff*diff/(2*this.variance))/(Math.sqrt(2*this.variance*Math.PI));}
else{var diff=sub(x,this.mean);return entrywisediv(exp(entrywisediv(entrywisemul(diff,diff),-2*this.variance)),Math.sqrt(2*this.variance*Math.PI));}}
else{if(type(x)=="vector"){if(x.length!=this.dimension){error("Error in mvGaussian.pdf(x): x.length = "+x.length+" != "+this.dimension+" = mvGaussian.dimension.");return undefined;}
var diff=subVectors(x,this.mean);var u=-0.5*dot(diff,cholsolve(this.L,diff));return Math.exp(u)/Math.sqrt(Math.pow(2*Math.PI,this.dimension)*this.det);}
else{if(x.n!=this.dimension){error("Error in Gaussian.pdf(X): X.n = "+x.n+" != "+this.dimension+" = Gaussian.dimension.");return undefined;}
var p=zeros(x.m);var denominator=Math.sqrt(Math.pow(2*Math.PI,this.dimension)*this.det);for(var i=0;i<x.m;i++){var diff=subVectors(x.row(i),this.mean);var u=-0.5*dot(diff,cholsolve(this.L,diff));p[i]=Math.exp(u)/denominator;}
return p;}}}
mvGaussian.prototype.sample=function(N){if(typeof(N)=="undefined")
var N=1;var X=add(mul(randn(N,this.dimension),transpose(this.L)),outerprod(ones(N),this.mean));if(N==1)
return X.val;else
return X;}
mvGaussian.prototype.estimate=function(X){if(type(X)=="matrix"){this.mean=mean(X,1).val;this.variance=cov(X);this.dimension=X.n;this.L=chol(this.variance);if(typeof(this.L)=="undefined")
error("Error in mvGaussian.estimate(X): covariance estimate is not positive definite");this.det=det(this.variance);return this;}
else{error("mvGaussian.estimate( X ) needs a matrix X");}}
function Bernoulli(params){var that=new Distribution(Bernoulli,params);return that;}
Bernoulli.prototype.construct=function(mean){if(typeof(mean)=="undefined")
var mean=0.5;var dim=size(mean,1);this.mean=mean;this.variance=entrywisemul(mean,sub(1,mean));this.std=sqrt(this.variance);this.dimension=dim;}
Bernoulli.prototype.pdf=Bernoulli.prototype.pmf=function(x){const tx=type(x);var pdfscalar=function(s,mu){if(s==1)
return mu;else if(s==0)
return(1-mu);else
return 0;};if(this.dimension==1){if(tx=="number"){return pdfscalar(x,this.mean);}
else if(tx=="vector"){var p=zeros(x.length);for(var i=0;i<x.length;i++){p[i]=pdfscalar(x[i],this.mean);}
return p;}
else if(tx=="matrix"){var P=zeros(x.m,x.n);var mn=x.m*x.n;for(var k=0;k<mn;k++){P.val[k]=pdfscalar(x.val[k],this.mean);}
return P;}}
else{switch(tx){case "vector":var p=pdfscalar(x[0],this.mean[0]);for(var k=1;k<this.dimension;k++)
p*=pdfscalar(x[k],this.mean[k]);break;case "spvector":var p=1;for(var j=0;j<x.ind[0];j++)
p*=(1-this.mean[j]);for(var k=0;k<x.val.length-1;k++){p*=this.mean[x.ind[k]];for(var j=x.ind[k]+1;j<x.ind[k+1];j++)
p*=(1-this.mean[j]);}
p*=this.mean[x.ind[k]];for(var j=x.ind[k]+1;j<this.dimension;j++)
p*=(1-this.mean[j]);break;case "matrix":var p=zeros(x.m);for(var i=0;i<x.m;i++){p[i]=pdfscalar(x.val[i*x.n],this.mean[0]);for(var k=1;k<x.n;k++)
p[i]*=pdfscalar(x.val[i*x.n+k],this.mean[k]);}
break;case "spmatrix":var p=ones(x.m);for(var i=0;i<x.m;i++){var xr=x.row(i);for(var j=0;j<xr.ind[0];j++)
p[i]*=(1-this.mean[j]);for(var k=0;k<xr.val.length-1;k++){p[i]*=this.mean[xr.ind[k]];for(var j=xr.ind[k]+1;j<xr.ind[k+1];j++)
p[i]*=(1-this.mean[j]);}
p[i]*=this.mean[xr.ind[k]];for(var j=xr.ind[k]+1;j<this.dimension;j++)
p[i]*=(1-this.mean[j]);}
break;default:var p=undefined;break;}
return p;}}
Bernoulli.prototype.logpdf=Bernoulli.prototype.logpmf=function(x){const tx=type(x);var logpdfscalar=function(s,mu){if(s==1)
return Math.log(mu);else if(s==0)
return Math.log(1-mu);else
return-Infinity;};if(this.dimension==1){if(tx=="number"){return logpdfscalar(x,this.mean);}
else if(tx=="vector"){var p=zeros(x.length);for(var i=0;i<x.length;i++){p[i]=logpdfscalar(x[i],this.mean);}
return p;}
else if(tx=="matrix"){var P=zeros(x.m,x.n);var mn=x.m*x.n;for(var k=0;k<mn;k++){P.val[k]=logpdfscalar(x.val[k],this.mean);}
return P;}}
else{switch(tx){case "vector":var p=0;for(var k=0;k<this.dimension;k++)
p+=logpdfscalar(x[k],this.mean[k]);break;case "spvector":var p=0;for(var j=0;j<x.ind[0];j++)
p+=Math.log(1-this.mean[j]);for(var k=0;k<x.val.length-1;k++){p+=Math.log(this.mean[x.ind[k]]);for(var j=x.ind[k]+1;j<x.ind[k+1];j++)
p+=Math.log(1-this.mean[j]);}
p+=Math.log(this.mean[x.ind[k]]);for(var j=x.ind[k]+1;j<this.dimension;j++)
p+=Math.log(1-this.mean[j]);break;case "matrix":var p=zeros(x.m);for(var i=0;i<x.m;i++){for(var k=0;k<x.n;k++)
p[i]+=logpdfscalar(x.val[i*x.n+k],this.mean[k]);}
break;case "spmatrix":var p=zeros(x.m);for(var i=0;i<x.m;i++){var xr=x.row(i);for(var j=0;j<xr.ind[0];j++)
p[i]+=Math.log(1-this.mean[j]);for(var k=0;k<xr.val.length-1;k++){p[i]+=Math.log(this.mean[xr.ind[k]]);for(var j=xr.ind[k]+1;j<xr.ind[k+1];j++)
p[i]+=Math.log(1-this.mean[j]);}
p[i]+=Math.log(this.mean[xr.ind[k]]);for(var j=xr.ind[k]+1;j<this.dimension;j++)
p[i]+=Math.log(1-this.mean[j]);}
break;default:var p=undefined;break;}
return p;}}
Bernoulli.prototype.sample=function(N){if(typeof(N)=="undefined"||N==1){return isLower(rand(this.dimension),this.mean);}
else{return isLower(rand(N,this.dimension),outerprod(ones(N),this.mean));}}
Bernoulli.prototype.estimate=function(X){switch(type(X)){case "matrix":case "spmatrix":this.mean=mean(X,1).val;this.variance=entrywisemul(this.mean,sub(1,this.mean));this.std=sqrt(this.variance);this.dimension=X.n;break;case "vector":case "spvector":this.dimension=1;this.mean=mean(X);this.variance=this.mean*(1-this.mean);this.std=Math.sqrt(this.variance);break;default:error("Error in Bernoulli.estimate( X ): X must be a (sp)matrix or (sp)vector.");break;}
return this;}
function Poisson(params){var that=new Distribution(Poisson,params);return that;}
Poisson.prototype.construct=function(mean){if(typeof(mean)=="undefined")
var mean=5;var dim=size(mean,1);this.mean=mean;this.variance=this.mean;this.std=sqrt(this.variance);this.dimension=dim;}
Poisson.prototype.pdf=Poisson.prototype.pmf=function(x){const tx=type(x);var pdfscalar=function(s,lambda){if(s<0||Math.round(s)!=s)
return 0;else if(s==0)
return 1;else{var u=lambda;for(var k=2;k<=s;k++)
u*=lambda/k;return Math.exp(-lambda)*u;}};if(this.dimension==1){if(tx=="number"){return pdfscalar(x,this.mean);}
else if(tx=="vector"){var p=zeros(x.length);for(var i=0;i<x.length;i++){p[i]=pdfscalar(x[i],this.mean);}
return p;}
else if(tx=="matrix"){var P=zeros(x.m,x.n);var mn=x.m*x.n;for(var k=0;k<mn;k++){P.val[k]=pdfscalar(x.val[k],this.mean);}
return p;}}
else{if(tx=="vector"){var p=pdfscalar(x[0],this.mean[0]);for(var k=0;k<this.dimension;k++)
p*=pdfscalar(x[k],this.mean[k]);return p;}
else if(tx=="matrix"){var p=zeros(x.m);for(var i=0;i<x.m;i++){p[i]=pdfscalar(x.val[i*x.n],this.mean[0]);for(var k=0;k<x.n;k++)
p[i]*=pdfscalar(x.val[i*x.n+k],this.mean[k]);}
return p;}}}
Poisson.prototype.sample=function(N){var samplescalar=function(lambda){var x=Math.random();var n=0;const exp_lambda=Math.exp(-lambda);while(x>exp_lambda){x*=Math.random();n++;}
return n;};if(typeof(N)=="undefined"||N==1){if(this.dimension==1)
return samplescalar(this.mean);else{var s=zeros(this.dimension);for(k=0;k<this.dimension;k++)
s[k]=samplescalar(this.mean[k]);return s;}}
else{if(this.dimension==1){var S=zeros(N);for(var i=0;i<N;i++)
S[i]=samplescalar(this.mean);return S;}
else{var S=zeros(N,this.dimension);for(var i=0;i<N;i++){for(k=0;k<this.dimension;k++)
S[i*this.dimension+k]=samplescalar(this.mean[k]);}
return S;}}}
Poisson.prototype.estimate=function(X){if(type(X)=="matrix"){this.mean=mean(X,1).val;this.variance=this.mean;this.std=sqrt(this.variance);this.dimension=X.n;}
else{this.dimension=1;this.mean=mean(X);this.variance=this.mean;this.std=Math.sqrt(this.variance);}
return this;}
const Complex_I=new Complex(0,1);function Complex(a,b,polar){this.type="Complex";if(typeof(a)=="undefined"){this.re=0.0;this.im=0.0;}
else if(a instanceof Complex){this.re=a.re;this.im=a.im;}
else if(typeof(a)=="number"&&!polar){this.re=a;this.im=b;}
else{this.re=a*Math.cos(b);this.im=a*Math.sin(b);}}
Complex.prototype.toString=function(){return this.re+(this.im>=0?" + ":" - ")+Math.abs(this.im)+"i";}
Complex.prototype.info=function(){return this.re+(this.im>=0?" + ":" - ")+Math.abs(this.im)+"i";}
function addComplex(a,b){var z=new Complex(a);z.re+=b.re;z.im+=b.im;return z;}
function addComplexReal(a,b){var z=new Complex(a);z.re+=b;return z;}
function subComplex(a,b){var z=new Complex(a);z.re-=b.re;z.im-=b.im;return z;}
function minusComplex(a){return new Complex(-a.re,-a.im);}
function mulComplex(a,b){return new Complex(a.re*b.re-a.im*b.im,a.im*b.re+a.re*b.im);}
function mulComplexReal(a,b){return new Complex(a.re*b,a.im*b);}
function divComplex(a,b){var denom=b.re*b.re+b.im*b.im;return new Complex((a.re*b.re+a.im*b.im)/denom,(a.im*b.re-a.re*b.im)/denom);}
function conj(z){if(z instanceof Complex)
return new Complex(z.re,-z.im);else if(z instanceof ComplexVector){var r=new ComplexVector(z);for(var i=0;i<z.length;i++)
r.im[i]=-r.im[i];return r;}
else if(z instanceof ComplexMatrix){var r=new ComplexMatrix(z);for(var i=0;i<z.length;i++)
r.im[i]=-r.im[i];return r;}
else
return new Complex(z);}
function modulus(z){if(z instanceof Complex)
return Math.sqrt(z.re*z.re+z.im*z.im);else if(z instanceof ComplexVector)
return sqrt(addVectors(entrywisemulVector(z.re,z.re),entrywisemulVector(z.im,z.im)));else if(z instanceof ComplexVector)
return new Matrix(z.m,z.n,sqrt(addVectors(entrywisemulVector(z.re,z.re),entrywisemulVector(z.im,z.im)),true));}
var absComplex=modulus;function expComplex(z){return new Complex(Math.exp(z.re),z.im,true);}
function ComplexVector(a,b,dontcopy){this.type="ComplexVector";if(arguments.length==0){}
else if(a instanceof ComplexVector){this.length=a.length;this.re=vectorCopy(a.re);this.im=vectorCopy(a.im);}
else if(typeof(a)=="number"){this.length=a;this.re=new Float64Array(a);this.im=new Float64Array(a);}
else if(a instanceof Float64Array&&b instanceof Float64Array){this.length=a.length;if(typeof(dontcopy)=="undefined"||!dontcopy){this.re=vectorCopy(a);this.im=vectorCopy(b);}
else{this.re=a;this.im=b;}}
else{error("Bad arguments to new ComplexVector()");}}
function ComplexMatrix(a,b,values,valuesimag){this.type="ComplexMatrix";if(arguments.length==0){}
else if(a instanceof ComplexMatrix){this.length=a.length;this.m=a.m;this.n=a.n;this.size=[a.m,a.n];this.re=vectorCopy(a.re);this.im=vectorCopy(a.im);}
else if(typeof(a)=="number"&&typeof(b)=="number"){this.length=a;this.m=a;this.n=b;this.size=[a,b];if(typeof(values)=="undefined"){this.re=new Float64Array(a*b);this.im=new Float64Array(a*b);}
else if(values instanceof ComplexVector){this.re=vectorCopy(values.re);this.im=vectorCopy(values.im);}
else if(values instanceof Float64Array&&typeof(valuesimag)!="undefined"&&valuesimag instanceof Float64Array){this.re=values;this.im=valuesimag;}}
else if(a instanceof Matrix&&b instanceof Matrix){this.length=a.length;this.m=a.m;this.n=a.n;this.size=[a.m,a.n];this.re=vectorCopy(a.val);this.im=vectorCopy(b.val);}
else
error("Bad arguments to new ComplexMatrix()");}
ComplexVector.prototype.toString=function(){return "["+this.type+" of size "+this.length+"]";}
ComplexMatrix.prototype.toString=function(){return "["+this.type+" of size "+this.m+" x "+this.n+"]";}
ComplexVector.prototype.get=function(i){return new Complex(this.re[i],this.im[i]);}
ComplexMatrix.prototype.get=function(i,j){return new Complex(this.re[i*this.n+j],this.im[i*this.n+j]);}
ComplexVector.prototype.set=function(i,z){if(typeof(z)=="number"){this.re[i]=z;this.im[i]=0;}
else{this.re[i]=z.re;this.im[i]=z.im;}}
ComplexMatrix.prototype.set=function(i,j,z){if(typeof(z)=="number"){this.re[i*this.n+j]=z;this.im[i*this.n+j]=0;}
else{this.re[i*this.n+j]=z.re;this.im[i*this.n+j]=z.im;}}
ComplexVector.prototype.getSubVector=function(rowsrange){const n=rowsrange.length;var res=new ComplexVector(n);for(var i=0;i<n;i++){res.re[i]=this.re[rowsrange[i]];res.im[i]=this.im[rowsrange[i]];}
return res;}
ComplexVector.prototype.setVectorScalar=function(rowsrange,B){var i;for(i=0;i<rowsrange.length;i++)
A.set(rowsrange[i],B);}
ComplexVector.prototype.setVectorVector=function(rowsrange,B){var i;for(i=0;i<rowsrange.length;i++)
A.set(rowsrange[i],B[i]);}
function real(z){if(z instanceof Complex)
return z.re;else if(z instanceof ComplexVector)
return vectorCopy(z.re);else if(z instanceof ComplexMatrix)
return new Matrix(z.m,z.n,z.re);else
return copy(z);}
function imag(z){if(z instanceof Complex)
return z.im;else if(z instanceof ComplexVector)
return vectorCopy(z.im);else if(z instanceof ComplexMatrix)
return new Matrix(z.m,z.n,z.im);else
return 0;}
function transposeComplexMatrix(A){const m=A.m;const n=A.n;if(m>1){var i;var j;var res=new ComplexMatrix(n,m);var Aj=0;for(j=0;j<m;j++){var ri=0;for(i=0;i<n;i++){res.re[ri+j]=A.re[Aj+i];res.im[ri+j]=-A.im[Aj+i];ri+=m;}
Aj+=n;}
return res;}
else{return new ComplexVector(A.re,minusVector(A.im));}}
ComplexMatrix.prototype.transpose=function(){const m=A.m;const n=A.n;if(m>1){var i;var j;var res=new ComplexMatrix(n,m);var Aj=0;for(j=0;j<m;j++){var ri=0;for(i=0;i<n;i++){res.re[ri+j]=A.re[Aj+i];res.im[ri+j]=A.im[Aj+i];ri+=m;}
Aj+=n;}
return res;}
else{return new ComplexVector(A.re,A.im);}}
function addComplexVectors(a,b){var z=new ComplexVector(a);const n=a.length;for(var i=0;i<n;i++){z.re[i]+=b.re[i];z.im[i]+=b.im[i];}
return z;}
function subComplexVectors(a,b){var z=new ComplexVector(a);const n=a.length;for(var i=0;i<n;i++){z.re[i]-=b.re[i];z.im[i]-=b.im[i];}
return z;}
function addComplexMatrices(a,b){var z=new ComplexMatrix(a);const mn=a.m*a.n;for(var i=0;i<mn;i++){z.re[i]+=b.re[i];z.im[i]+=b.im[i];}
return z;}
function subComplexMatrices(a,b){var z=new ComplexMatrix(a);const mn=a.m*a.n;for(var i=0;i<mn;i++){z.re[i]-=b.re[i];z.im[i]-=b.im[i];}
return z;}
function addComplexVectorVector(a,b){var z=new ComplexVector(a);const n=a.length;for(var i=0;i<n;i++){z.re[i]+=b[i];}
return z;}
function subComplexVectorVector(a,b){var z=new ComplexVector(a);const n=a.length;for(var i=0;i<n;i++){z.re[i]-=b[i];}
return z;}
function addComplexMatrixMatrix(a,b){var z=new ComplexMatrix(a);const n=a.m*a.n;for(var i=0;i<n;i++){z.re[i]+=b.val[i];}
return z;}
function subComplexMatrixMatrix(a,b){var z=new ComplexMatrix(a);const n=a.m*a.n;for(var i=0;i<n;i++){z.re[i]-=b.val[i];}
return z;}
function addScalarComplexVector(a,b){var z=new ComplexVector(b);const n=b.length;for(var i=0;i<n;i++){z.re[i]+=a;}
return z;}
function subScalarComplexVector(a,b){var z=minusComplexVector(b);const n=b.length;for(var i=0;i<n;i++){z.re[i]+=a;}
return z;}
function addScalarComplexMatrix(a,b){var z=new ComplexMatrix(b);const n=b.m*b.n;for(var i=0;i<n;i++){z.re[i]+=a;}
return z;}
function entrywisemulComplexVectors(a,b){const n=a.length;var z=new ComplexVector(n);for(var i=0;i<n;i++){z.re[i]=a.re[i]*b.re[i]-a.im[i]*b.im[i];z.im[i]=a.im[i]*b.re[i]+a.re[i]*b.im[i];}
return z;}
function entrywisedivComplexVectors(a,b){const n=a.length;var z=new ComplexVector(n);for(var i=0;i<n;i++){var bre=b.re[i];var bim=b.im[i];var denom=bre*bre+bim*bim;z.re[i]=(a.re[i]*bre+a.im[i]*bim)/denom;z.im[i]=(a.im[i]*bre-a.re[i]*bim)/denom;}
return z;}
function entrywisemulComplexMatrices(a,b){const n=a.m*a.n;var z=new ComplexMatrix(a.m,a.n);for(var i=0;i<n;i++){z.re[i]=a.re[i]*b.re[i]-a.im[i]*b.im[i];z.im[i]=a.im[i]*b.re[i]+a.re[i]*b.im[i];}
return z;}
function entrywisedivComplexMatrices(a,b){const n=a.m*a.n;var z=new ComplexMatrix(a.m,a.n);for(var i=0;i<n;i++){var bre=b.re[i];var bim=b.im[i];var denom=bre*bre+bim*bim;z.re[i]=(a.re[i]*bre+a.im[i]*bim)/denom;z.im[i]=(a.im[i]*bre-a.re[i]*bim)/denom;}
return z;}
function entrywisemulComplexVectorVector(a,b){const n=a.length;var z=new ComplexVector(n);for(var i=0;i<n;i++){z.re[i]=a.re[i]*b[i];z.im[i]=a.im[i]*b[i];}
return z;}
function entrywisemulComplexMatrixMatrix(a,b){const n=a.m*a.n;var z=new ComplexMatrix(a.m,a.n);for(var i=0;i<n;i++){z.re[i]=a.re[i]*b.val[i];z.im[i]=a.im[i]*b.val[i];}
return z;}
function minusComplexVector(a){const n=a.length;var z=new ComplexVector(n);for(var i=0;i<n;i++){z.re[i]=-a.re[i];z.im[i]=-a.im[i];}
return z;}
function minusComplexMatrix(a){var z=new ComplexMatrix(a.m,a.n);const n=a.m*a.n;for(var i=0;i<n;i++){z.re[i]=-a.re[i];z.im[i]=-a.im[i];}
return z;}
function sumComplexVector(a){var z=new Complex();const n=a.length;for(var i=0;i<n;i++){z.re+=a.re[i];z.im+=a.im[i];}
return z;}
function sumComplexMatrix(a){var z=new Complex();const n=a.m*a.n;for(var i=0;i<n;i++){z.re+=a.re[i];z.im+=a.im[i];}
return z;}
function norm1ComplexVector(a){var r=0.0;const n=a.length;for(var i=0;i<n;i++){r+=Math.sqrt(a.re[i]*a.re[i]+a.im[i]*a.im[i]);}
return r;}
function norm2ComplexVector(a){var r=0.0;const n=a.length;for(var i=0;i<n;i++){r+=a.re[i]*a.re[i]+a.im[i]*a.im[i];}
return Math.sqrt(r);}
function normFroComplexMatrix(a){var r=0.0;const n=a.m*a.n;for(var i=0;i<n;i++){r+=a.re[i]*a.re[i]+a.im[i]*a.im[i];}
return Math.sqrt(r);}
function dotComplexVectors(a,b){var z=new Complex();const n=a.length;for(var i=0;i<n;i++){z.re+=a.re[i]*b.re[i]+a.im[i]*b.im[i];z.im+=a.im[i]*b.re[i]-a.re[i]*b.im[i]}
return z;}
function dotComplexVectorVector(a,b){var z=new Complex();const n=a.length;for(var i=0;i<n;i++){z.re+=a.re[i]*b[i];z.im+=a.im[i]*b[i];}
return z;}
function mulScalarComplexVector(a,b){var re=mulScalarVector(a,b.re);var im=mulScalarVector(a,b.im);return new ComplexVector(re,im,true);}
function mulComplexComplexVector(a,b){const n=b.length;var z=new ComplexVector(n);var are=a.re;var aim=a.im;for(var i=0;i<n;i++){z.re[i]=are*b.re[i]-aim*b.im[i];z.im[i]=aim*b.re[i]+are*b.im[i];}
return z;}
function mulComplexVector(a,b){const n=b.length;var z=new ComplexVector(n);var are=a.re;var aim=a.im;for(var i=0;i<n;i++){z.re[i]=are*b[i];z.im[i]=aim*b[i];}
return z;}
function mulScalarComplexMatrix(a,b){var re=mulScalarVector(a,b.re);var im=mulScalarVector(a,b.im);return new ComplexMatrix(b.m,b.n,re,im);}
function mulComplexComplexMatrix(a,b){const n=b.m*b.n;var z=new ComplexMatrix(b.m,b.n);var are=a.re;var aim=a.im;for(var i=0;i<n;i++){z.re[i]=are*b.re[i]-aim*b.im[i];z.im[i]=aim*b.re[i]+are*b.im[i];}
return z;}
function mulComplexMatrix(a,b){const n=b.m*b.n;var z=new ComplexMatrix(b.m,b.n);var are=a.re;var aim=a.im;for(var i=0;i<n;i++){z.re[i]=are*b.val[i];z.im[i]=aim*b.val[i];}
return z;}
function mulComplexMatrixVector(a,b){const m=a.m;const n=a.n;var z=new ComplexVector(m);var ai=0;for(var i=0;i<m;i++){for(j=0;j<n;j++){z.re[i]+=a.re[ai+j]*b[j];z.im[i]+=a.im[ai+j]*b[j];}
ai+=n;}
return z;}
function mulComplexMatrixComplexVector(a,b){const m=a.m;const n=a.n;var z=new ComplexVector(m);var ai=0;for(var i=0;i<m;i++){for(j=0;j<n;j++){z.re[i]+=a.re[ai+j]*b.re[j]-a.im[ai+j]*b.im[j];z.im[i]+=a.im[ai+j]*b.re[j]+a.re[ai+j]*b.im[j];}
ai+=n;}
return z;}
function mulComplexMatrices(A,B){const m=A.length;const n=B.n;const n2=B.length;var Are=A.re;var Aim=A.im;var Bre=B.re;var Bim=B.im;var Cre=new Float64Array(m*n);var Cim=new Float64Array(m*n);var aik;var Aik=0;var Ci=0;for(var i=0;i<m;i++){var bj=0;for(var k=0;k<n2;k++){aikre=Are[Aik];aikim=Aim[Aik];for(var j=0;j<n;j++){Cre[Ci+j]+=aikre*Bre[bj]-aikim*Bim[bj];Cim[Ci+j]+=aikre*Bim[bj]+aikim*Bre[bj];bj++;}
Aik++;}
Ci+=n;}
return new ComplexMatrix(m,n,Cre,Cim);}
function mulComplexMatrixMatrix(A,B){const m=A.m;const n=B.n;const n2=B.m;var Are=A.re;var Aim=A.im;var Bre=B.val;var Cre=new Float64Array(m*n);var Cim=new Float64Array(m*n);var aik;var Aik=0;var Ci=0;for(var i=0;i<m;i++){var bj=0;for(var k=0;k<n2;k++){aikre=Are[Aik];aikim=Aim[Aik];for(var j=0;j<n;j++){Cre[Ci+j]+=aikre*Bre[bj];Cim[Ci+j]+=aikim*Bre[bj];bj++;}
Aik++;}
Ci+=n;}
return new ComplexMatrix(m,n,Cre,Cim);}
function fft(x){const n=x.length;const s=Math.log2(n);const m=n/2;if(s%1!=0){error("fft(x) only implemented for x.length = 2^m. Use dft(x) instead.");return undefined;}
var X=new ComplexVector(x,zeros(n));var j=0;for(var i=0;i<n-1;i++){if(i<j){var Xi=X.re[i];X.re[i]=X.re[j];X.re[j]=Xi;Xi=X.im[i];X.im[i]=X.im[j];X.im[j]=Xi;}
var k=m;while(k<=j){j-=k;k/=2;}
j+=k;}
var l2=1;var c=new Complex(-1,0);var u=new Complex();for(var l=0;l<s;l++){var l1=l2;l2*=2;u.re=1;u.im=0;for(var j=0;j<l1;j++){for(var i=j;i<n;i+=l2){var i1=i+l1;var t1re=u.re*X.re[i1]-u.im*X.im[i1];var t1im=u.im*X.re[i1]+u.re*X.im[i1];X.re[i1]=X.re[i]-t1re;X.im[i1]=X.im[i]-t1im;X.re[i]+=t1re;X.im[i]+=t1im;}
u=mulComplex(u,c);}
c.im=-Math.sqrt((1.0-c.re)/2.0);c.re=Math.sqrt((1.0+c.re)/2.0);}
return X;}
function ifft(x){const n=x.length;const s=Math.log2(n);const m=n/2;if(s%1!=0){error("ifft(x) only implemented for x.length = 2^m. Use idft(x) instead.");return undefined;}
var X=new ComplexVector(x,zeros(n));var j=0;for(var i=0;i<n-1;i++){if(i<j){var Xi=X.re[i];X.re[i]=X.re[j];X.re[j]=Xi;Xi=X.im[i];X.im[i]=X.im[j];X.im[j]=Xi;}
var k=m;while(k<=j){j-=k;k/=2;}
j+=k;}
var l2=1;var c=new Complex(-1,0);var u=new Complex();for(var l=0;l<s;l++){var l1=l2;l2*=2;u.re=1;u.im=0;for(var j=0;j<l1;j++){for(var i=j;i<n;i+=l2){var i1=i+l1;var t1re=u.re*X.re[i1]-u.im*X.im[i1];var t1im=u.im*X.re[i1]+u.re*X.im[i1];X.re[i1]=X.re[i]-t1re;X.im[i1]=X.im[i]-t1im;X.re[i]+=t1re;X.im[i]+=t1im;}
u=mulComplex(u,c);}
c.im=Math.sqrt((1.0-c.re)/2.0);c.re=Math.sqrt((1.0+c.re)/2.0);}
var isComplex=false;for(var i=0;i<n;i++){X.re[i]/=n;X.im[i]/=n;if(Math.abs(X.im[i])>1e-6)
isComplex=true;}
if(isComplex)
return X;else
return X.re;}
function dft(x){if(typeof(x)=="number")
return new Complex(x,0);const n=x.length;if(n==1)
return new Complex(x[0],0);else if(Math.log2(n)%1==0)
return fft(x);else{var X=new ComplexVector(n);var thet=0.0;for(var i=0;i<n;i++){var theta=0.0;for(var t=0;t<n;t++){X.re[i]+=x[t]*Math.cos(theta);X.im[i]+=x[t]*Math.sin(theta);theta+=thet;}
thet-=2*Math.PI/n;}
return X;}}
function idft(X){if(!(X instanceof ComplexVector)){if(X instanceof Complex)
return X.re;else if(typeof(X)=="number")
return X;else if(X instanceof Float64Array)
return idft(new ComplexVector(X,zeros(X.length),true));else
return undefined;}
const n=X.length;if(n==1)
return X.re[0];else if(Math.log2(n)%1==0)
return ifft(X);else{var x=new Float64Array(n);var thet=0.0;for(var t=0;t<n;t++){var theta=0.0;var re=0.0;for(var i=0;i<n;i++){re+=X.re[i]*Math.cos(theta)-X.im[i]*Math.sin(theta);theta+=thet;}
x[t]=re/n;thet+=2*Math.PI/n;}
return x;}}
function spectrum(x){if(x instanceof Float64Array){return absComplex(dft(x));}
else
return undefined;}
return{laloprint:laloprint,lalo:lalo,Lalolab:Lalolab,load_data:load_data,LALOLIB_ERROR:LALOLIB_ERROR,EPS:EPS,isZero:isZero,tic:tic,toc:toc,type:type,isArrayOfNumbers:isArrayOfNumbers,isScalar:isScalar,printVector:printVector,Matrix:Matrix,array2mat:array2mat,array2vec:array2vec,size:size,ones:ones,zeros:zeros,eye:eye,diag:diag,vec:vec,matrixCopy:matrixCopy,vectorCopy:vectorCopy,vectorCopyInto:vectorCopyInto,arrayCopy:arrayCopy,appendRow:appendRow,reshape:reshape,get:get,getSubMatrix:getSubMatrix,getRows:getRows,getCols:getCols,getSubVector:getSubVector,getSubArray:getSubArray,getrowref:getrowref,set:set,setVectorScalar:setVectorScalar,setVectorVector:setVectorVector,setMatrixScalar:setMatrixScalar,setMatrixMatrix:setMatrixMatrix,setMatrixColVector:setMatrixColVector,setMatrixRowVector:setMatrixRowVector,setRows:setRows,setCols:setCols,dense:dense,supp:supp,range:range,swaprows:swaprows,swapcols:swapcols,randnScalar:randnScalar,randn:randn,randVector:randVector,randMatrix:randMatrix,rand:rand,randnsparse:randnsparse,randsparse:randsparse,randperm:randperm,apply:apply,aaplyVector:applyVector,applyMatrix:applyMatrix,applyComplexVector:applyComplexVector,applyComplexMatrix:applyComplexMatrix,mul:mul,mulScalarVector:mulScalarVector,mulScalarMatrix:mulScalarMatrix,dot:dot,mulMatrixVector:mulMatrixVector,mulMatrixTransVector:mulMatrixTransVector,mulMatrixMatrix:mulMatrixMatrix,entrywisemulVector:entrywisemulVector,entrywisemulMatrix:entrywisemulMatrix,entrywisemul:entrywisemul,saxpy:saxpy,gaxpy:gaxpy,divVectorScalar:divVectorScalar,divScalarVector:divScalarVector,divVectors:divVectors,divMatrixScalar:divMatrixScalar,divScalarMatrix:divScalarMatrix,divMatrices:divMatrices,entrywisediv:entrywisediv,outerprodVectors:outerprodVectors,outerprod:outerprod,addScalarVector:addScalarVector,addScalarMatrix:addScalarMatrix,addVectors:addVectors,addMatrices:addMatrices,add:add,subScalarVector:subScalarVector,subVectorScalar:subVectorScalar,subScalarMatrix:subScalarMatrix,subMatrixScalar:subMatrixScalar,subVectors:subVectors,subMatrices:subMatrices,sub:sub,pow:pow,minus:minus,minusVector:minusVector,minusMatrix:minusMatrix,minVector:minVector,minMatrix:minMatrix,minVectorScalar:minVectorScalar,minMatrixScalar:minMatrixScalar,minMatrixRows:minMatrixRows,minMatrixCols:minMatrixCols,minVectorVector:minVectorVector,minMatrixMatrix:minMatrixMatrix,min:min,maxVector:maxVector,maxMatrix:maxMatrix,maxVectorScalar:maxVectorScalar,maxMatrixScalar:maxMatrixScalar,maxMatrixRows:maxMatrixRows,maxMatrixCols:maxMatrixCols,maxVectorVector:maxVectorVector,maxMatrixMatrix:maxMatrixMatrix,max:max,transposeMatrix:transposeMatrix,transposeVector:transposeVector,transpose:transpose,det:det,trace:trace,triiu:triu,tril:tril,issymmetric:issymmetric,mat:mat,isEqual:isEqual,isNotEqual:isNotEqual,isGreater:isGreater,isGreaterOrEqual:isGreaterOrEqual,isLower:isLower,isLowerOrEqual:isLowerOrEqual,find:find,argmax:argmax,findmax:findmax,argmin:argmin,findmin:findmin,sort:sort,sumVector:sumVector,sumMatrix:sumMatrix,sumMatrixRows:sumMatrixRows,sumMatrixCols:sumMatrixCols,sum:sum,prodVector:prodVector,prodMatrix:prodMatrix,prodMatrixRows:prodMatrixRows,prodMatrixCols:prodMatrixCols,prod:prod,mean:mean,variance:variance,std:std,cov:cov,xtx:xtx,norm:norm,norm1:norm1,norminf:norminf,normp:normp,normnuc:normnuc,norm0:norm0,norm0Vector:norm0Vector,solve:solve,cholsolve:cholsolve,inv:inv,chol:chol,ldlsymmetricpivoting:ldlsymmetricpivoting,qr:qr,solvecg:solvecg,cgnr:cgnr,eig:eig,eigs:eigs,svd:svd,rank:rank,nullspace:nullspace,orth:orth,nchoosek:nchoosek,mvnrnd:mvnrnd,Distribution:Distribution,Uniform:Uniform,Gaussian:Gaussian,mvGaussian:mvGaussian,Bernoulli:Bernoulli,Poisson:Poisson,spVector:spVector,spMatrix:spMatrix,spgetRows:spgetRows,fullVector:fullVector,fullMatrix:fullMatrix,full:full,sparseVector:sparseVector,sparseMatrix:sparseMatrix,sparseMatrixRowMajor:sparseMatrixRowMajor,sparse:sparse,speye:speye,spdiag:spdiag,transposespVector:transposespVector,transposespMatrix:transposespMatrix,spmat:spmat,mulScalarspVector:mulScalarspVector,mulScalarspMatrix:mulScalarspMatrix,spdot:spdot,dotspVectorVector:dotspVectorVector,mulMatrixspVector:mulMatrixspVector,mulspMatrixVector:mulspMatrixVector,mulspMatrixTransVector:mulspMatrixTransVector,mulspMatrixspVector:mulspMatrixspVector,mulspMatrixTransspVector:mulspMatrixTransspVector,mulspMatrixspMatrix:mulspMatrixspMatrix,mulMatrixspMatrix:mulMatrixspMatrix,mulspMatrixMatrix:mulspMatrixMatrix,entrywisemulspVectors:entrywisemulspVectors,entrywisemulspVectorVector:entrywisemulspVectorVector,entrywisemulspMatrices:entrywisemulspMatrices,entrywisemulspMatrixMatrix:entrywisemulspMatrixMatrix,addScalarspVector:addScalarspVector,addVectorspVector:addVectorspVector,addspVectors:addspVectors,addScalarspMatrix:addScalarspMatrix,addMatrixspMatrix:addMatrixspMatrix,addspMatrices:addspMatrices,spsaxpy:spsaxpy,subScalarspVector:subScalarspVector,subVectorspVector:subVectorspVector,subspVectorVector:subspVectorVector,subspVectors:subspVectors,subScalarspMatrix:subScalarspMatrix,subspMatrixMatrix:subspMatrixMatrix,subMatrixspMatrix:subMatrixspMatrix,subspMatrices:subspMatrices,applyspVector:applyspVector,applyspMatrix:applyspMatrix,sumspVector:sumspVector,sumspMatrix:sumspMatrix,sumspMatrixRows:sumspMatrixRows,sumspMatrixCols:sumspMatrixCols,prodspMatrixRows:prodspMatrixRows,prodspMatrixCols:prodspMatrixCols,Complex:Complex,addComplex:addComplex,addComplexReal:addComplexReal,subComplex:subComplex,minusComplex:minusComplex,mulComplex:mulComplex,mulComplexReal:mulComplexReal,divComplex:divComplex,conj:conj,modulus:modulus,absComplex:absComplex,expComplex:expComplex,ComplexVector:ComplexVector,ComplexMatrix:ComplexMatrix,real:real,imag:imag,transposeComplexMatrix:transposeComplexMatrix,addComplexVectors:addComplexVectors,subComplexVectors:subComplexVectors,addComplexMatrices:addComplexMatrices,subComplexMatrices:subComplexMatrices,addComplexVectorVector:addComplexVectorVector,subComplexVectorVector:subComplexVectorVector,addComplexMatrixMatrix:addComplexMatrixMatrix,subComplexMatrixMatrix:subComplexMatrixMatrix,addScalarComplexVector:addScalarComplexVector,subScalarComplexVector:subScalarComplexVector,addScalarComplexMatrix:addScalarComplexMatrix,entrywisemulComplexVectors:entrywisemulComplexVectors,entrywisedivComplexVectors:entrywisedivComplexVectors,entrywisemulComplexMatrices:entrywisemulComplexMatrices,entrywisedivComplexMatrices:entrywisedivComplexMatrices,entrywisemulComplexVectorVector:entrywisemulComplexVectorVector,entrywisemulComplexMatrixMatrix:entrywisemulComplexMatrixMatrix,minusComplexVector:minusComplexVector,minusComplexMatrix:minusComplexMatrix,sumComplexVector:sumComplexVector,sumComplexMatrix:sumComplexMatrix,norm1ComplexVector:norm1ComplexVector,norm2ComplexVector:norm2ComplexVector,normFroComplexMatrix:normFroComplexMatrix,dotComplexVectors:dotComplexVectors,dotComplexVectorVector:dotComplexVectorVector,mulScalarComplexVector:mulScalarComplexVector,mulComplexComplexVector:mulComplexComplexVector,mulComplexVector:mulComplexVector,mulScalarComplexMatrix:mulScalarComplexMatrix,mulComplexComplexMatrix:mulComplexComplexMatrix,mulComplexMatrix:mulComplexMatrix,mulComplexMatrixVector:mulComplexMatrixVector,mulComplexMatrixComplexVector:mulComplexMatrixComplexVector,mulComplexMatrices:mulComplexMatrices,mulComplexMatrixMatrix:mulComplexMatrixMatrix,fft:fft,ifft:ifft,dft:dft,idft:idft,spectrum:spectrum,minimize:minimize,secant:secant,steepestdescent:steepestdescent,bfgs:bfgs}})();